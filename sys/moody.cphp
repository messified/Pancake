<?php namespace Moody{class Configuration{private static$A=array();public static function load($B){}public static function set($C,$D){return self::$A[$C]=$D;}public static function get($C,$E=null){if(isset(self::$A[$C]))return self::$A[$C];return$E;}}}namespace Moody{class ConstantContainer{private static$F=array();public static function initialize(){foreach(get_defined_constants()as$G=>$H)if(!self::isDefined($G))self::define($G,$H);}public static function getConstant($I){$I=strtolower($I);if(isset(self::$F[$I]))return self::$F[$I];}public static function isDefined($I){return isset(self::$F[strtolower($I)]);}public static function define($I,$D){self::$F[strtolower($I)]=$D;}public static function undefine($I){$I=strtolower($I);if(isset(self::$F[$I]))unset(self::$F[$I]);}}}namespace Moody{const END_TOKEN_NO_EXECUTE=1;const END_TOKEN_EXECUTE=2;class IfInstruction{private static$J=array();private static$K=array();private$L;private$M;private$N=END_TOKEN_EXECUTE;public function __construct(Token$L){self::$J[]=$this;self::$K[]=$this;$this->L=$L;}public static function setEndToken(Token$L){if(!self::$K)throw new InstructionProcessorException('Endif or Else while no if is active',$L);end(self::$K);self::$K[key(self::$K)]->M=$L;unset(self::$K[key(self::$K)]);}public function getToken(){return$this->L;}public function getEndToken(){return$this->M;}public function setEndTokenAction($O){$this->N=$O;}public function getEndTokenAction(){return$this->N;}public static function getAll(){return self::$J;}}}namespace Moody{interface InstructionHandler{public static function getInstance();public function execute(Token$L,$P,TokenHandlers\InstructionProcessor$Q,TokenVM$R);}interface InstructionHandlerWithRegister extends InstructionHandler{public function register(Token$L,$P,TokenHandlers\InstructionProcessor$Q,TokenVM$R);}}namespace Moody{class InstructionProcessorException extends \Exception{private$L;public function __construct($S,Token$L){$this->S=$S;$this->L=$L;}public function __toString(){$B='The Moody Instruction Processor encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->S."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString()."\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;return$B;}}}namespace Moody{class MoodyException extends \Exception{public function __toString(){$B='Moody encountered an unexpected error and can not continue.'."\r\n";$B.='Exception message: '.$this->S."\r\n";$B.='System backtrace: '."\r\n".$this->getTraceAsString();return$B;}}}namespace Moody{define('T_DOT',16384);define('T_UNKNOWN',16385);define('T_ROUND_BRACKET_OPEN',16386);define('T_ROUND_BRACKET_CLOSE',16387);define('T_COMMA',16388);define('T_TRUE',16389);define('T_FALSE',16390);define('T_NULL',16391);define('T_FORCED_WHITESPACE',16392);define('T_SEMICOLON',16393);if(!defined('T_INSTEADOF'))define('T_INSTEADOF',32768);if(!defined('T_TRAIT'))define('T_TRAIT',32769);class Token{public$T=0;public$U=0;public$V=0;public$W="Unknown";public$X=0;public$Y="";private static$Z=0;private static$a=0;private static$b=array(T_ABSTRACT=>"T_ABSTRACT",T_AND_EQUAL=>"T_AND_EQUAL",T_ARRAY=>"T_ARRAY",T_ARRAY_CAST=>"T_ARRAY_CAST",T_AS=>"T_AS",T_BAD_CHARACTER=>"T_BAD_CHARACTER",T_BOOLEAN_AND=>"T_BOOLEAN_AND",T_BOOLEAN_OR=>"T_BOOLEAN_OR",T_BOOL_CAST=>"T_BOOL_CAST",T_BREAK=>"T_BREAK",T_CASE=>"T_CASE",T_CATCH=>"T_CATCH",T_CHARACTER=>"T_CHARACTER",T_CLASS=>"T_CLASS",T_CLASS_C=>"T_CLASS_C",T_CLONE=>"T_CLONE",T_CLOSE_TAG=>"T_CLOSE_TAG",T_COMMA=>"T_COMMA",T_COMMENT=>"T_COMMENT",T_CONCAT_EQUAL=>"T_CONCAT_EQUAL",T_CONST=>"T_CONST",T_CONSTANT_ENCAPSED_STRING=>"T_CONSTANT_ENCAPSED_STRING",T_CONTINUE=>"T_CONTINUE",T_CURLY_OPEN=>"T_CURLY_OPEN",T_DEC=>"T_DEC",T_DECLARE=>"T_DECLARE",T_DEFAULT=>"T_DEFAULT",T_DIR=>"T_DIR",T_DIV_EQUAL=>"T_DIV_EQUAL",T_DNUMBER=>"T_DNUMBER",T_DO=>"T_DO",T_DOC_COMMENT=>"T_DOC_COMMENT",T_DOLLAR_OPEN_CURLY_BRACES=>"T_DOLLAR_OPEN_CURLY_BRACES",T_DOT=>"T_DOT",T_DOUBLE_ARROW=>"T_DOUBLE_ARROW",T_DOUBLE_CAST=>"T_DOUBLE_CAST",T_DOUBLE_COLON=>"T_DOUBLE_COLON",T_ECHO=>"T_ECHO",T_ELSE=>"T_ELSE",T_ELSEIF=>"T_ELSEIF",T_EMPTY=>"T_EMPTY",T_ENCAPSED_AND_WHITESPACE=>"T_ENCAPSED_AND_WHITESPACE",T_ENDDECLARE=>"T_ENDDECLARE",T_ENDFOR=>"T_ENDFOR",T_ENDFOREACH=>"T_ENDFOREACH",T_ENDIF=>"T_ENDIF",T_ENDSWITCH=>"T_ENDSWITCH",T_ENDWHILE=>"T_ENDWHILE",T_END_HEREDOC=>"T_END_HEREDOC",T_EVAL=>"T_EVAL",T_EXIT=>"T_EXIT",T_EXTENDS=>"T_EXTENDS",T_FALSE=>"T_FALSE",T_FILE=>"T_FILE",T_FINAL=>"T_FINAL",T_FOR=>"T_FOR",T_FORCED_WHITESPACE=>"T_FORCED_WHITESPACE",T_FOREACH=>"T_FOREACH",T_FUNCTION=>"T_FUNCTION",T_FUNC_C=>"T_FUNC_C",T_GLOBAL=>"T_GLOBAL",T_GOTO=>"T_GOTO",T_HALT_COMPILER=>"T_HALT_COMPILER",T_OPEN_TAG=>"T_OPEN_TAG",T_ROUND_BRACKET_CLOSE=>"T_ROUND_BRACKET_CLOSE",T_ROUND_BRACKET_OPEN=>"T_ROUND_BRACKET_OPEN",T_SEMICOLON=>"T_SEMICOLON",T_STRING=>"T_STRING",T_TRUE=>"T_TRUE",T_UNKNOWN=>"T_UNKNOWN",T_VARIABLE=>"T_VARIABLE",T_WHITESPACE=>"T_WHITESPACE");public function __construct(){$this->T=self::$Z++;}public static function tokenize($c,$d=null){$Z=token_get_all($c);if(!$Z)throw new MoodyException('Token::tokenize() was called with a non-tokenizable code');$e=array();self::$a++;foreach($Z as$L){$f=new Token;$f->V=self::$a;if($d)$f->W=$d;if(is_array($L)){$f->U=$L[0];$f->Y=$L[1];$f->X=$L[2];if(strtolower($f->Y)=='true')$f->U=T_TRUE;else if(strtolower($f->Y)=='false')$f->U=T_FALSE;else if(strtolower($f->Y)=='null')$f->U=T_NULL;}else {$f->Y=$L;$f->X=-1;switch($L){case'.':$f->U=T_DOT;break;case'(':$f->U=T_ROUND_BRACKET_OPEN;break;case')':$f->U=T_ROUND_BRACKET_CLOSE;break;case',':$f->U=T_COMMA;break;case';':$f->U=T_SEMICOLON;break;default:$f->U=T_UNKNOWN;}}$e[]=$f;}return$e;}public function __toString(){$B='Type: '.(isset(self::$b[$this->U])?self::$b[$this->U]:$this->U)."\r\n";$B.='Content: '.$this->Y."\r\n";if($this->W!="Unknown"){$B.='Origin: '.$this->W."\r\n";$B.='Line: '.$this->X."\r\n";}return$B;}public static function makeEvaluatable($D){if(is_string($D))return"'".str_replace("'","\'",$D)."'";if(is_int($D)||is_float($D))return$D;if($D===true)return"true";if($D===false)return"false";if($D===null)return"null";}}}namespace Moody{interface TokenHandler{public static function getInstance();public function execute(Token$L,TokenVM$R);}interface TokenHandlerWithRegister extends TokenHandler{public function register(Token$L,TokenVM$R);}}namespace Moody{class TokenVM{const NEXT_TOKEN=1;const QUIT=2;const NEXT_HANDLER=4;const ERROR=8;const REEXECUTE_TOKEN=16;const REEXECUTE_HANDLER=32;const JUMP=64;const CLEAR_RETVAL=128;const CLEAR_ERROR=256;const DELETE_TOKEN=512;private static$g=array();private$h=array();private$i=array();private$j=array();private$k=null;public function __construct(){$this->h=self::$g;}public function execute($j){if(!$j)throw new VMException('Virtual machine received empty token array');$this->j=$j;$l=0;foreach($this->j as$L){if(isset($this->h[$L->U])){foreach($this->h[$L->U]as$m){if(!is_object($m))throw new VMException('Handler for token is not a object',$L);$n=clone$L;if(is_callable(array($m,'register')))$m->register($L,$this);$L=$n;}reset($this->h[$L->U]);}}reset($this->j);$o=array();nextToken:if(!($L=current($this->j)))goto quit;$p=$L->T;next($this->j);$q=clone$L;executeToken:if(!is_int($p))throw new VMException('Token ID '.$p.' is not an integer');if(!($L instanceof Token))throw new VMException('Element '.$p.' is not a valid token');$this->i[$p]=true;$l=0;nextHandler:if(isset($this->h[$L->U])){if(current($this->h[$L->U])!==false){$m=current($this->h[$L->U]);next($this->h[$L->U]);}else {reset($this->h[$L->U]);goto doRetval;}}else {$o[]=$L;goto nextToken;}executeHandler:if(!is_object($m))throw new VMException('Handler for token is not a object',$L);if(!is_callable(array($m,'execute')))throw new VMException('The execute method of the token handler does not exist or is not callable from the virtual machines\' scope',$L);$r=$m->execute($L,$this);if($r&self::CLEAR_RETVAL)$l=$r;else $l|=$r;doRetval:if($l&self::REEXECUTE_HANDLER){$l^=self::REEXECUTE_HANDLER;goto executeHandler;}if($l&self::NEXT_HANDLER){$l^=self::NEXT_HANDLER;goto nextHandler;}if($l&self::REEXECUTE_TOKEN){$l^=self::REEXECUTE_TOKEN;goto executeToken;}if(!($l&self::DELETE_TOKEN))$o[]=$L;if($l&self::QUIT)goto quit;if($l&self::ERROR&&!($l&self::CLEAR_ERROR))throw new VMException('Token handler returned an error',$L,$q);if($l&self::JUMP){if(!($this->k instanceof Token))throw new VMException('Cannot jump to new token as it is not a token',$L,$q);if(!in_array($this->k,$this->j))throw new VMException('Cannot jump to new token as it is not specified in current token array',$L,$q);if(array_search($this->k,$this->j)<key($this->j)){while(current($this->j)!=$this->k)prev($this->j);}else if(array_search($this->k,$this->j)>key($this->j)){while(current($this->j)!=$this->k)next($this->j);}}if($l&self::NEXT_TOKEN)goto nextToken;throw new VMException('Token handler did not specify an action for the virtual machine',$L,$q);quit:return$o;}public function hasExecuted($p){return isset($this->$i[$p]);}public static function globalRegisterTokenHandler($s,TokenHandler$t){if(!isset(self::$g[$s]))self::$g[$s]=array($t);else self::$g[$s][]=$t;}public static function globalUnregisterTokenHandler($s,TokenHandler$t){if(!isset(self::$g[$s])||($u=array_search(self::$h[$s]))===false)return;unset(self::$g[$s][$u]);}public function registerTokenHandler($s,TokenHandler$t){if(!isset($this->h[$s]))$this->h[$s]=array($t);else $this->h[$s][]=$t;}public function unregisterTokenHandler($s,TokenHandler$t){if(!isset($this->h[$s])||($u=array_search($this->h[$s]))===false)return;unset($this->h[$s][$u]);}public function jump(Token$L){$this->k=$L;}public function insertTokenArray($j){reset($j);$v=current($j);while($L=current($this->j)){$w[]=$L;unset($this->j[key($this->j)]);}foreach($j as$L){if(isset($this->h[$L->U])){$u=key($this->h[$L->U]);foreach($this->h[$L->U]as$m){if(!is_object($m))throw new VMException('Handler for token is not a object',$L);$n=clone$L;if(is_callable(array($m,'register')))$m->register($L,$this);$L=$n;}reset($this->h[$L->U]);while(key($this->h[$L->U])!==$u)next($this->h[$L->U]);}$this->j[]=$L;}foreach($w as$L)$this->j[]=$L;$u=array_search($v,$this->j);while(key($this->j)!=$u)prev($this->j);}public function getTokenArray(){return$this->j;}}}namespace Moody{class VMException extends \Exception{private$L;private$q;public function __construct($S,Token$L=null,Token$q=null){$this->S=$S;$this->L=$L;$this->q=$q;}public function __toString(){$B='The Moody Virtual Machine encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->S."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString();if($this->L instanceof Token){$B.="\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;}if($this->q instanceof Token){$B.="\r\n";$B.='Current token before modification through token handlers:'."\r\n";$B.=(string)$this->q;}return$B;}}}namespace Moody\TokenHandlers{use Moody\TokenHandlerWithRegister;use Moody\TokenVM;use Moody\Token;use Moody\InstructionProcessorException;use Moody\Configuration;use Moody\ConstantContainer;use Moody\InstructionHandler;class InstructionProcessorimplementsTokenHandlerWithRegister{private static$x=null;private$h=array();public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_COMMENT,$this);}public function execute(Token$L,TokenVM$R){$Y=str_replace(array("//","/*","*/","#"),"",$L->Y);$y=array();$z=0;if(preg_match('~^\s*(\.([A-Za-z]+))~',$Y,$y)){$i0=strtolower($y[2]);if(isset($this->h[$i0])){if(!is_callable(array($this->h[$i0],'execute')))throw new InstructionProcessorException('Handler for instruction "'.$y[1].'" does not exist or is not callable',$L);$z=$this->h[$i0]->execute($L,$y[1],$this,$R);}else if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$y[1].'"',$L);}else if(Configuration::get('deletecomments',false))$z=TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|$z;}public function register(Token$L,TokenVM$R){$Y=str_replace(array("//","/*","*/","#"),"",$L->Y);$y=array();if(preg_match('~^\s*(\.([A-Za-z]+))~',$Y,$y)){$i0=strtolower($y[2]);if(isset($this->h[$i0])){if(is_callable(array($this->h[$i0],'register')))$this->h[$i0]->register($L,$y[1],$this,$R);}}}private function inlineExecute(Token$L){$Y=str_replace(array("//","/*","*/","#"),"",$L->Y);$y=array();if(preg_match('~^\s*(\.([A-Za-z]+))~',$Y,$y)){$i0=strtolower($y[2]);if(isset($this->h[$i0])){if(!is_callable(array($this->h[$i0],'inlineExecute')))throw new InstructionProcessorException('Handler for instruction "'.$y[1].'" does not support inline execution or is not callable',$L);$this->h[$i0]->inlineExecute($L,$y[1],$this);}else if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$y[1].'"',$L);}}public function registerHandler($i0,InstructionHandler$t){$this->h[$i0]=$t;}public function parseArguments(Token$i1,$P,$i2){if($i2)$i3=str_split($i2);else $i3=array();if(!strpos($i1->Y,$P))throw new InstructionProcessorException('Token corrupted',$i1);if(substr($i1->Y,0,2)=='/*')$Y=substr($i1->Y,2,strrpos($i1->Y,'*/')-2);else if(substr($i1->Y,0,1)=='#')$Y=substr($i1->Y,1);else $Y=substr($i1->Y,2);$i4=substr($Y,strpos($Y,$P)+strlen($P));$Z=Token::tokenize('<?php '.$i4.' ?>');$i5=0;$i6=0;$i7=$i8=array();foreach($Z as$L){if($L->U==T_OPEN_TAG||$L->U==T_CLOSE_TAG||$L->U==T_ROUND_BRACKET_OPEN||$L->U==T_ROUND_BRACKET_CLOSE||$L->U==T_COMMA||$L->U==T_WHITESPACE||in_array($L,$i8))continue;switch($L->U){case T_STRING:if(ConstantContainer::isDefined($L->Y))$i9=ConstantContainer::getConstant($L->Y);else $i9=$L->Y;break;case T_CONSTANT_ENCAPSED_STRING:$i9=eval('return '.$L->Y.';');break;case T_TRUE:$i9=true;break;case T_FALSE:$i9=false;break;case T_LNUMBER:$i9=(int)$L->Y;break;case T_DNUMBER:$i9=(float)$L->Y;break;case T_NULL:$i9=null;break;case T_NS_SEPARATOR:$i10="";$i11=key($Z)-1;prev($Z);while($i12=prev($Z)){if($i12->U!=T_STRING)break;unset($i7[key($i7)]);$i10=$i12->Y.$i10;}while(key($Z)!=$i11)next($Z);$i10.=$L->Y;while($i13=next($Z)){if($i13->U!=T_NS_SEPARATOR&&$i13->U!=T_STRING)break;$i10.=$i13->Y;$i8[]=$i13;}if(ConstantContainer::isDefined($i10))$i9=ConstantContainer::getConstant($i10);else $i9=$i10;break;case T_COMMENT:$this->inlineExecute($L);default:$i9=$L->Y;}parseArg:if(!isset($i3[$i5+$i6])||!$i3[$i5+$i6]){$i7[]=$i9;}else if($i3[$i5+$i6]=='?'){$i6++;goto parseArg;}else {switch(strtolower($i3[$i5+$i6])){default:throw new InstructionProcessorException('Illegal option for argument parser given: '.$i3[$i5+$i6],$i1);case'n':if(is_numeric($i9)&&is_string($i9))$i7[]=(float)$i9;else if(is_int($i9)||is_float($i9)||$i9===null)$i7[]=$i9;else throw new InstructionProcessorException('Illegal argument '.($i5+1).' for '.$P.': '.$L->Y.' given, number expected',$i1);break;case's':if((is_string($i9)&&($L->U==T_STRING||$L->U==T_CONSTANT_ENCAPSED_STRING))||$i9===null)$i7[]=$i9;else throw new InstructionProcessorException('Illegal argument '.($i5+1).' for '.$P.': '.$L->Y.' given, string expected',$i1);break;case'b':if(is_bool($i9)||$i9===null)$i7[]=$i9;else throw new InstructionProcessorException('Illegal argument '.($i5+1).' for '.$P.': '.$L->Y.' given, bool expected',$i1);break;case'x':$i7[]=$i9;}}$i5++;}if((strpos($i2,'?')!==false&&$i5<strpos($i2,'?'))||($i5<count($i3)&&strpos($i2,'?')===false))throw new InstructionProcessorException($P.' expects '.count($i3).' arguments, '.$i5.' given',$i1);return$i7;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class DocCommentHandlerimplementsTokenHandler{private static$x=null;public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_DOC_COMMENT,$this);}public function execute(Token$L,TokenVM$R){if(Configuration::get('deletecomments',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\Token;use Moody\TokenVM;use Moody\TokenHandler;class OpenTagHandlerimplementsTokenHandler{private static$x=null;public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_OPEN_TAG,$this);}public function execute(Token$L,TokenVM$R){if($L->Y=='<?'||$L->Y=='<%')$L->Y='<?php ';return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class VariableHandlerimplementsTokenHandler{private static$x=null;private$i14=array();private$i15="A";public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_OBJECT_OPERATOR,$this);}public function execute(Token$L,TokenVM$R){static$i16=array('$this','$_GET','$_POST','$_REQUEST','$_COOKIE','$_ENV','$_SESSION');if(Configuration::get('compressvariables',false)&&!in_array($L->Y,$i16)){if($L->U==T_OBJECT_OPERATOR){if(!Configuration::get('compressproperties',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;$j=$R->getTokenArray();$i17=current($j);if($i17->U!=T_STRING)goto end;while($i18=next($j)){if($i18->U==T_WHITESPACE)continue;if($i18->U==T_ROUND_BRACKET_OPEN)goto end;break;}$i19=$i17;$i19->Y='$'.$i19->Y;}else $i19=$L;if(!isset($this->i14[$i19->Y])){if(!Configuration::get('compressproperties',false)){$j=$R->getTokenArray();prev($j);while($i18=prev($j)){switch($i18->U){case T_STATIC:$i20=true;goto map;default:if(!isset($i20)&&isset($i21))goto end;goto map;case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:$i21=true;case T_WHITESPACE:case T_FORCED_WHITESPACE:continue 2;}}}map:do{$this->mapVariable($i19->Y,is_int($this->i15)?'$i'.$this->i15:'$'.$this->i15);if($this->i15==="Z")$this->i15="a";else if($this->i15==="z")$this->i15=0;else if(is_int($this->i15))$this->i15++;else $this->i15=chr(ord($this->i15)+1);}while(count(array_keys($this->i14,$this->i14[$i19->Y]))>1);}$i19->Y=isset($i17)?substr($this->i14[$i19->Y],1):$this->i14[$i19->Y];}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}public function mapVariable($i22,$i23){return$this->i14[$i22]=$i23;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Configuration;use Moody\Token;class WhitespaceHandlerimplementsTokenHandler{private static$x=null;public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_WHITESPACE,$this);TokenVM::globalRegisterTokenHandler(T_ECHO,$this);TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_GOTO,$this);TokenVM::globalRegisterTokenHandler(T_ELSE,$this);TokenVM::globalRegisterTokenHandler(T_NAMESPACE,$this);TokenVM::globalRegisterTokenHandler(T_CONST,$this);TokenVM::globalRegisterTokenHandler(T_NEW,$this);TokenVM::globalRegisterTokenHandler(T_INSTANCEOF,$this);TokenVM::globalRegisterTokenHandler(T_INSTEADOF,$this);TokenVM::globalRegisterTokenHandler(T_STRING,$this);TokenVM::globalRegisterTokenHandler(T_CLASS,$this);TokenVM::globalRegisterTokenHandler(T_EXTENDS,$this);TokenVM::globalRegisterTokenHandler(T_PUBLIC,$this);TokenVM::globalRegisterTokenHandler(T_PROTECTED,$this);TokenVM::globalRegisterTokenHandler(T_PRIVATE,$this);TokenVM::globalRegisterTokenHandler(T_FINAL,$this);TokenVM::globalRegisterTokenHandler(T_STATIC,$this);TokenVM::globalRegisterTokenHandler(T_FUNCTION,$this);TokenVM::globalRegisterTokenHandler(T_RETURN,$this);TokenVM::globalRegisterTokenHandler(T_CASE,$this);TokenVM::globalRegisterTokenHandler(T_START_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_SEMICOLON,$this);TokenVM::globalRegisterTokenHandler(T_END_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_BREAK,$this);TokenVM::globalRegisterTokenHandler(T_CONTINUE,$this);TokenVM::globalRegisterTokenHandler(T_USE,$this);TokenVM::globalRegisterTokenHandler(T_THROW,$this);TokenVM::globalRegisterTokenHandler(T_INTERFACE,$this);TokenVM::globalRegisterTokenHandler(T_TRAIT,$this);}public function execute(Token$L,TokenVM$R){if(Configuration::get('deletewhitespaces',false)){switch($L->U){case T_WHITESPACE:$j=$R->getTokenArray();if(($i18=current($j))&&$i18->U==T_END_HEREDOC)$this->insertForcedWhitespace($R,true);return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;case T_ECHO:case T_RETURN:case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:case T_STATIC:case T_FINAL:case T_CASE:case T_CONTINUE:case T_BREAK:case T_THROW:$j=$R->getTokenArray();if($i18=current($j)){if($i18->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i18=next($j))&&$i18->U!=T_CONSTANT_ENCAPSED_STRING&&$i18->U!=T_VARIABLE)$this->insertForcedWhitespace($R);}break;case T_VARIABLE:$j=$R->getTokenArray();if($i18=current($j)){if($i18->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i18=next($j))&&($i18->U==T_AS||$i18->U==T_INSTANCEOF))$this->insertForcedWhitespace($R);}break;case T_GOTO:case T_NAMESPACE:case T_CONST:case T_NEW:case T_INSTANCEOF:case T_INSTEADOF:case T_CLASS:case T_EXTENDS:case T_FUNCTION:case T_START_HEREDOC:case T_USE:case T_INTERFACE:case T_TRAIT:$this->insertForcedWhitespace($R);break;case T_ELSE:$j=$R->getTokenArray();if($i18=current($j)){if($i18->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i18=next($j))&&$i18->U!=T_CURLY_OPEN)$this->insertForcedWhitespace($R);}break;case T_STRING:$j=$R->getTokenArray();if($i18=current($j)){if($i18->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i18=next($j))&&($i18->U==T_EXTENDS||$i18->U==T_INSTEADOF||$i18->U==T_INSTANCEOF||$i18->U==T_AS))$this->insertForcedWhitespace($R);}break;case T_SEMICOLON:$j=$R->getTokenArray();prev($j);$i18=prev($j);if($i18->U==T_END_HEREDOC)$this->insertForcedWhitespace($R,true);break;case T_END_HEREDOC:$j=$R->getTokenArray();if(($i18=current($j))&&$i18->U!=T_SEMICOLON)$this->insertForcedWhitespace($R,true);break;}}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}private function insertForcedWhitespace(TokenVM$R,$i24=false){$L=new Token;$L->Y=$i24?"\r\n":" ";$L->U=T_FORCED_WHITESPACE;$L->W="Moody WhitespaceHandler";$R->insertTokenArray(array($L));}}}namespace Moody\InstructionHandlers{use Moody\Configuration;use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ConfigurationHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('config',$this);InstructionProcessor::getInstance()->registerHandler('configuration',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i7=$Q->parseArguments($L,$P,'s?x');if(!isset($i7[1])){$L->Y=Token::makeEvaluatable(Configuration::get($i7[0],null));return 0;}else Configuration::set($i7[0],$i7[1]);return TokenVM::DELETE_TOKEN;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GetConstantHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('const',$this);InstructionProcessor::getInstance()->registerHandler('constant',$this);InstructionProcessor::getInstance()->registerHandler('getconstant',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i7=$Q->parseArguments($L,$P,'s');if(!ConstantContainer::isDefined($i7[0]))throw new InstructionProcessorException($P.': Undefined constant: '.$i7[0],$L);$i25=ConstantContainer::getConstant($i7[0]);$L->Y=Token::makeEvaluatable($i25);return 0;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\ConstantContainer;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class DefineHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('define',$this);InstructionProcessor::getInstance()->registerHandler('def',$this);InstructionProcessor::getInstance()->registerHandler('d',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'sx');ConstantContainer::define($i7[0],$i7[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EchoHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('echo',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');echo$i7[0];return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseHandlerimplementsInstructionHandlerWithRegister{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('else',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){foreach(IfInstruction::getAll()as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i26=$i0;}}foreach(IfInstruction::getAll()as$i0){if($i0->getEndToken()==$L){if($i0->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i26->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$R->jump($i26->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return TokenVM::DELETE_TOKEN;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseIfHandlerimplementsInstructionHandlerWithRegister{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('elseif',$this);InstructionProcessor::getInstance()->registerHandler('elif',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){foreach(IfInstruction::getAll()as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i26=$i0;}}foreach(IfInstruction::getAll()as$i0){if($i0->getEndToken()==$L){if($i0->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i26->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$R->jump($i26->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return IfHandler::getInstance()->execute($L,$P,$Q,$R);}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\TokenHandlers\InstructionProcessor;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenVM;use Moody\IfInstruction;class EndIfHandlerimplementsInstructionHandlerWithRegister{private static$x;private function __construct(){InstructionProcessor::getInstance()->registerHandler('endif',$this);}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::DELETE_TOKEN;}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EvalHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('eval',$this);InstructionProcessor::getInstance()->registerHandler('evaluate',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i7=$Q->parseArguments($L,$P,'s?bb');if(!isset($i7[1])||$i7[1]===true){if(!strpos($i7[0],'<?')){$i27=true;$j=Token::tokenize('<?php '.$i7[0].' ?>');}else $j=Token::tokenize($i7[0]);$R=new TokenVM();try{$j=$R->execute($j);}catch(\Exception$i28){echo (string)$i28."\r\n";exit;}if(isset($i27)){reset($j);unset($j[key($j)]);end($j);unset($j[key($j)]);}$i7[0]="";foreach($j as$i29){$i7[0].=$i29->Y;}}$i30=eval($i7[0]);if($i30!==null){$L->Y=!isset($i7[2])||$i7[2]===true?Token::makeEvaluatable($i30):$i30;return 0;}return TokenVM::DELETE_TOKEN;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){return$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ExitHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('exit',$this);InstructionProcessor::getInstance()->registerHandler('halt',$this);InstructionProcessor::getInstance()->registerHandler('quit',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::QUIT|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GotoHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('goto',$this);InstructionProcessor::getInstance()->registerHandler('jump',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');$i31=LabelHandler::getLabel($i7[0]);if(!($i31 instanceof Token))throw new InstructionProcessorException('Jump to undefined label '.$i7[0],$L);$R->jump($i31);return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_ELSE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfHandlerimplementsInstructionHandlerWithRegister{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('if',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'x');foreach(IfInstruction::getAll()as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i32="";$i30=false;foreach($i7 as$i33){if(is_string($i33)&&strtolower($i33)!=="true"&&strtolower($i33)!=="false"){$Z=Token::tokenize('<?php '.$i33.' ?>');if($Z[1]->U==T_STRING)$i33=Token::makeEvaluatable($i33);}if($i33===true)$i33="true";if($i33===false)$i33="false";$i32.=$i33;}$i30=eval('return (int) (bool) ('.$i32.');');if($i30===1){$i0->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);return TokenVM::DELETE_TOKEN;}if($i30===false)throw new InstructionProcessorException('If-condition '.$i32.' is invalid',$L);$R->jump($i0->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfDefHandlerimplementsInstructionHandlerWithRegister{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifdef',$this);InstructionProcessor::getInstance()->registerHandler('ifdefined',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');foreach(IfInstruction::getAll()as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);if(ConstantContainer::isDefined($i7[0]))return TokenVM::DELETE_TOKEN;$R->jump($i0->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfNotDefHandlerimplementsInstructionHandlerWithRegister{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifndef',$this);InstructionProcessor::getInstance()->registerHandler('ifnotdefined',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');foreach(IfInstruction::getAll()as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);if(!ConstantContainer::isDefined($i7[0]))return TokenVM::DELETE_TOKEN;$R->jump($i0->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IncludeHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('include',$this);InstructionProcessor::getInstance()->registerHandler('inc',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');if(!file_exists($i7[0]))throw new InstructionProcessorException($i7[0].' does not exist',$L);if(!is_readable($i7[0]))throw new InstructionProcessorException($i7[0].' is not readable - Make sure Moody has the rights to read it',$L);$d=file_get_contents($i7[0]);$Z=Token::tokenize($d,$i7[0]);switch($Z[0]->U){case T_OPEN_TAG:unset($Z[0]);break;case T_INLINE_HTML:$L=new Token;$L->U=T_CLOSE_TAG;$L->Y=" ?>";$i34=array($L);foreach($Z as$L)$i34[]=$L;$Z=$i34;}end($Z);switch(current($Z)->U){case T_CLOSE_TAG:unset($Z[key($Z)]);break;case T_INLINE_HTML:$L=new Token;$L->U=T_OPEN_TAG;$L->Y="<?php ";$Z[]=$L;}$R->insertTokenArray($Z);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IsDefinedHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('isdefined',$this);InstructionProcessor::getInstance()->registerHandler('isdef',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i7=$Q->parseArguments($L,$P,'s');if(ConstantContainer::isDefined($i7[0]))$L->Y=Token::makeEvaluatable(true);else $L->Y=Token::makeEvaluatable(false);return 0;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class LabelHandlerimplementsInstructionHandlerWithRegister{private static$x=null;private static$i35=array();private function __construct(){InstructionProcessor::getInstance()->registerHandler('label',$this);InstructionProcessor::getInstance()->registerHandler('jumplabel',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::DELETE_TOKEN;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');if(isset(self::$i35[$i7[0]]))throw new InstructionProcessorException('Double definition of jump label "'.$i7[0].'" (first definition at '.self::$i35[$i7[0]]->W.':'.self::$i35[$i7[0]]->X,$L);self::$i35[$i7[0]]=$L;}public static function getLabel($I){if(isset(self::$i35[$I]))return self::$i35[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class MacroHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('macro',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){if(strtolower($P)=='.macro'){$i7=$Q->parseArguments($L,$P,'ss');if(!strlen($i7[0]))throw new InstructionProcessorException('Macro name cannot be empty',$L);$i36=new Macro(strtolower($i7[0]),$i7[1]);$Q->registerHandler(strtolower($i7[0]),$this);unset($i7[0],$i7[1]);foreach($i7 as$i33)$i36->addArgument($i33);return TokenVM::DELETE_TOKEN;}$i37=substr(strtolower($P),1);$i36=Macro::getMacro($i37);if(!$i36)throw new InstructionProcessorException('Call to bad macro',$L);$i3="";for($i38=0;$i38<$i36->numArgs();$i38++)$i3.='x';$i7=$Q->parseArguments($L,$P,$i3);$R->insertTokenArray($i36->buildCode($i7));return TokenVM::DELETE_TOKEN;}}class Macro{private$I="";private$c="";private$i39=array();private static$i40=array();public function __construct($I,$c){$this->I=$I;$this->c=$c;self::$i40[$I]=$this;}public function addArgument($i41){$this->i39[]=$i41;}public function numArgs(){return count($this->i39);}public function buildCode($i7=array()){$i38=0;$c=$this->c;foreach($this->i39 as$i33){$c=str_replace($i33,$i7[$i38],$c);$i38++;}$Z=Token::tokenize('<?php '.$c,'Macro '.$this->I);unset($Z[0]);return$Z;}public static function getMacro($I){if(isset(self::$i40[$I]))return self::$i40[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenHandlers\VariableHandler;use Moody\TokenVM;class MapVariableHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('mapvariable',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'ss');if(!class_exists('Moody\TokenHandlers\VariableHandler'))throw new InstructionProcessorException('Variable mapping is not available as the token handler for T_VARIABLE is not currently loaded',$L);VariableHandler::getInstance()->mapVariable($i7[0],$i7[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class RaiseErrorHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('raiseerror',$this);InstructionProcessor::getInstance()->registerHandler('error',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i7=$Q->parseArguments($L,$P,'s');throw new InstructionProcessorException($i7[0],$L);}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class UndefineHandlerimplementsInstructionHandler{private static$x=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('undef',$this);InstructionProcessor::getInstance()->registerHandler('undefine',$this);}public static function getInstance(){if(!self::$x)self::$x=new self;return self::$x;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i7=$Q->parseArguments($L,$P,'s');if(!ConstantContainer::isDefined($i7[0]))throw new InstructionProcessorException($P.': Undefined constant: '.$i7[0],$L);ConstantContainer::undefine($i7[0]);return TokenVM::DELETE_TOKEN;}}}?>