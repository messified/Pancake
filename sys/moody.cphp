<?php namespace Moody{class Configuration{private static$A=array();public static function load($B){}public static function set($C,$D){return self::$A[$C]=$D;}public static function get($C,$E=null){if(isset(self::$A[$C]))return self::$A[$C];return$E;}}}namespace Moody{class ConstantContainer{private static$F=array();public static function initialize(){foreach(get_defined_constants()as$G=>$H)if(!self::isDefined($G))self::define($G,$H);}public static function getConstant($I){$I=strtolower($I);if(isset(self::$F[$I]))return self::$F[$I];}public static function isDefined($I){return isset(self::$F[strtolower($I)]);}public static function define($I,$D){self::$F[strtolower($I)]=$D;}public static function undefine($I){$I=strtolower($I);if(isset(self::$F[$I]))unset(self::$F[$I]);}}}namespace Moody{const END_TOKEN_NO_EXECUTE=1;const END_TOKEN_EXECUTE=2;class MultiTokenInstruction{private static$J=array();private static$K=array();private$L;private$M;private$N=END_TOKEN_EXECUTE;public function __construct(Token$L,$O){self::$J[$O][]=$this;self::$K[$O][]=$this;$this->L=$L;}public static function setEndToken(Token$L,$O){if(!isset(self::$K[$O])||!self::$K[$O])throw new InstructionProcessorException('End token of type '.$O.' while not active',$L);end(self::$K[$O]);self::$K[$O][key(self::$K[$O])]->M=$L;unset(self::$K[$O][key(self::$K[$O])]);}public function getToken(){return$this->L;}public function getEndToken(){return$this->M;}public function setEndTokenAction($P){$this->N=$P;}public function getEndTokenAction(){return$this->N;}public static function getAll($O){return self::$J[$O];}}}namespace Moody{interface InstructionHandler{public static function getInstance();public function execute(Token$L,$Q,TokenHandlers\InstructionProcessor$R,TokenVM$S);}interface InstructionHandlerWithRegister extends InstructionHandler{public function register(Token$L,$Q,TokenHandlers\InstructionProcessor$R,TokenVM$S);}interface InlineInstructionHandler extends InstructionHandler{public function execute(Token$L,$Q,TokenHandlers\InstructionProcessor$R,TokenVM$S=null,$T=0);}interface DefaultInstructionHandler extends InstructionHandler{public function execute(Token$L,$Q,TokenHandlers\InstructionProcessor$R,TokenVM$S=null,$T=0);public function canExecute(Token$L,$Q,TokenHandlers\InstructionProcessor$R);}}namespace Moody{class InstructionProcessorException extends \Exception{private$L;public function __construct($message,Token$L){$this->message=$message;$this->L=$L;}public function __toString(){$B='The Moody Instruction Processor encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->message."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString()."\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;return$B;}}}namespace Moody{class MoodyException extends \Exception{public function __toString(){$B='Moody encountered an unexpected error and can not continue.'."\r\n";$B.='Exception message: '.$this->message."\r\n";$B.='System backtrace: '."\r\n".$this->getTraceAsString();return$B;}}}namespace Moody{define('T_DOT',16384);define('T_UNKNOWN',16385);define('T_ROUND_BRACKET_OPEN',16386);define('T_ROUND_BRACKET_CLOSE',16387);define('T_COMMA',16388);define('T_TRUE',16389);define('T_FALSE',16390);define('T_NULL',16391);define('T_FORCED_WHITESPACE',16392);define('T_SEMICOLON',16393);if(!defined('T_INSTEADOF'))define('T_INSTEADOF',32768);if(!defined('T_TRAIT'))define('T_TRAIT',32769);class Token{public$U=0;public$V=0;public$W=0;public$X="Unknown";public$Y=0;public$content="";private static$Z=0;private static$a=0;private static$b=array(T_ABSTRACT=>"T_ABSTRACT",T_AND_EQUAL=>"T_AND_EQUAL",T_ARRAY=>"T_ARRAY",T_ARRAY_CAST=>"T_ARRAY_CAST",T_AS=>"T_AS",T_BAD_CHARACTER=>"T_BAD_CHARACTER",T_BOOLEAN_AND=>"T_BOOLEAN_AND",T_BOOLEAN_OR=>"T_BOOLEAN_OR",T_BOOL_CAST=>"T_BOOL_CAST",T_BREAK=>"T_BREAK",T_CASE=>"T_CASE",T_CATCH=>"T_CATCH",T_CHARACTER=>"T_CHARACTER",T_CLASS=>"T_CLASS",T_CLASS_C=>"T_CLASS_C",T_CLONE=>"T_CLONE",T_CLOSE_TAG=>"T_CLOSE_TAG",T_COMMA=>"T_COMMA",T_COMMENT=>"T_COMMENT",T_CONCAT_EQUAL=>"T_CONCAT_EQUAL",T_CONST=>"T_CONST",T_CONSTANT_ENCAPSED_STRING=>"T_CONSTANT_ENCAPSED_STRING",T_CONTINUE=>"T_CONTINUE",T_CURLY_OPEN=>"T_CURLY_OPEN",T_DEC=>"T_DEC",T_DECLARE=>"T_DECLARE",T_DEFAULT=>"T_DEFAULT",T_DIR=>"T_DIR",T_DIV_EQUAL=>"T_DIV_EQUAL",T_DNUMBER=>"T_DNUMBER",T_DO=>"T_DO",T_DOC_COMMENT=>"T_DOC_COMMENT",T_DOLLAR_OPEN_CURLY_BRACES=>"T_DOLLAR_OPEN_CURLY_BRACES",T_DOT=>"T_DOT",T_DOUBLE_ARROW=>"T_DOUBLE_ARROW",T_DOUBLE_CAST=>"T_DOUBLE_CAST",T_DOUBLE_COLON=>"T_DOUBLE_COLON",T_ECHO=>"T_ECHO",T_ELSE=>"T_ELSE",T_ELSEIF=>"T_ELSEIF",T_EMPTY=>"T_EMPTY",T_ENCAPSED_AND_WHITESPACE=>"T_ENCAPSED_AND_WHITESPACE",T_ENDDECLARE=>"T_ENDDECLARE",T_ENDFOR=>"T_ENDFOR",T_ENDFOREACH=>"T_ENDFOREACH",T_ENDIF=>"T_ENDIF",T_ENDSWITCH=>"T_ENDSWITCH",T_ENDWHILE=>"T_ENDWHILE",T_END_HEREDOC=>"T_END_HEREDOC",T_EVAL=>"T_EVAL",T_EXIT=>"T_EXIT",T_EXTENDS=>"T_EXTENDS",T_FALSE=>"T_FALSE",T_FILE=>"T_FILE",T_FINAL=>"T_FINAL",T_FOR=>"T_FOR",T_FORCED_WHITESPACE=>"T_FORCED_WHITESPACE",T_FOREACH=>"T_FOREACH",T_FUNCTION=>"T_FUNCTION",T_FUNC_C=>"T_FUNC_C",T_GLOBAL=>"T_GLOBAL",T_GOTO=>"T_GOTO",T_HALT_COMPILER=>"T_HALT_COMPILER",T_OPEN_TAG=>"T_OPEN_TAG",T_ROUND_BRACKET_CLOSE=>"T_ROUND_BRACKET_CLOSE",T_ROUND_BRACKET_OPEN=>"T_ROUND_BRACKET_OPEN",T_SEMICOLON=>"T_SEMICOLON",T_STRING=>"T_STRING",T_TRUE=>"T_TRUE",T_UNKNOWN=>"T_UNKNOWN",T_VARIABLE=>"T_VARIABLE",T_WHITESPACE=>"T_WHITESPACE");public function __construct(){$this->U=self::$Z++;}public static function tokenize($code,$c=null){$Z=token_get_all($code);if(!$Z)throw new MoodyException('Token::tokenize() was called with a non-tokenizable code');$d=array();self::$a++;foreach($Z as$L){$e=new Token;$e->W=self::$a;if($c)$e->X=$c;if(is_array($L)){$e->V=$L[0];$e->content=$L[1];$e->Y=$L[2];if(strtolower($e->content)=='true')$e->V=T_TRUE;else if(strtolower($e->content)=='false')$e->V=T_FALSE;else if(strtolower($e->content)=='null')$e->V=T_NULL;}else {$e->content=$L;$e->Y=-1;switch($L){case'.':$e->V=T_DOT;break;case'(':$e->V=T_ROUND_BRACKET_OPEN;break;case')':$e->V=T_ROUND_BRACKET_CLOSE;break;case',':$e->V=T_COMMA;break;case';':$e->V=T_SEMICOLON;break;default:$e->V=T_UNKNOWN;}}$d[]=$e;}return$d;}public function __toString(){$B='Type: '.(isset(self::$b[$this->V])?self::$b[$this->V]:$this->V)."\r\n";$B.='Content: '.$this->content."\r\n";if($this->X!="Unknown"){$B.='Origin: '.$this->X."\r\n";$B.='Line: '.$this->Y."\r\n";}return$B;}public static function makeEvaluatable($D){if(is_string($D))return"'".str_replace("'","\'",$D)."'";if(is_int($D)||is_float($D))return$D;if($D===true)return"true";if($D===false)return"false";if($D===null)return"null";}}}namespace Moody{interface TokenHandler{public static function getInstance();public function execute(Token$L,TokenVM$S);}interface TokenHandlerWithRegister extends TokenHandler{public function register(Token$L,TokenVM$S);}}namespace Moody{class TokenVM{const NEXT_TOKEN=1;const QUIT=2;const NEXT_HANDLER=4;const ERROR=8;const REEXECUTE_TOKEN=16;const REEXECUTE_HANDLER=32;const JUMP=64;const CLEAR_RETVAL=128;const CLEAR_ERROR=256;const DELETE_TOKEN=512;private static$f=array();private$g=array();private$h=array();private$i=array();private$j=null;public function __construct(){$this->g=self::$f;}public function execute($i){if(!$i)throw new VMException('Virtual machine received empty token array');$this->i=$i;$k=0;foreach($this->i as$L){if(isset($this->g[$L->V])){foreach($this->g[$L->V]as$l){if(!is_object($l))throw new VMException('Handler for token is not a object',$L);$m=clone$L;if(is_callable(array($l,'register')))$l->register($L,$this);$L=$m;}reset($this->g[$L->V]);}}reset($this->i);$n=array();nextToken:if(!($L=current($this->i)))goto quit;$o=$L->U;next($this->i);$p=clone$L;executeToken:if(!is_int($o))throw new VMException('Token ID '.$o.' is not an integer');if(!($L instanceof Token))throw new VMException('Element '.$o.' is not a valid token');$this->h[$o]=true;$k=0;nextHandler:if(isset($this->g[$L->V])){if(current($this->g[$L->V])!==false){$l=current($this->g[$L->V]);next($this->g[$L->V]);}else {reset($this->g[$L->V]);goto doRetval;}}else {$n[]=$L;goto nextToken;}executeHandler:if(!is_object($l))throw new VMException('Handler for token is not an object',$L);if(!is_callable(array($l,'execute')))throw new VMException('The execute method of the token handler does not exist or is not callable from the virtual machines\' scope',$L);$q=$l->execute($L,$this);if($q&self::CLEAR_RETVAL)$k=$q;else $k|=$q;doRetval:if($k&self::REEXECUTE_HANDLER){$k^=self::REEXECUTE_HANDLER;goto executeHandler;}if($k&self::NEXT_HANDLER){$k^=self::NEXT_HANDLER;goto nextHandler;}if($k&self::REEXECUTE_TOKEN){$k^=self::REEXECUTE_TOKEN;goto executeToken;}if(!($k&self::DELETE_TOKEN))$n[]=$L;if($k&self::QUIT)goto quit;if($k&self::ERROR&&!($k&self::CLEAR_ERROR))throw new VMException('Token handler returned an error',$L,$p);if($k&self::JUMP){if(!($this->j instanceof Token))throw new VMException('Cannot jump to new token as it is not a token',$L,$p);if(!in_array($this->j,$this->i))throw new VMException('Cannot jump to new token as it is not specified in current token array',$L,$p);if(array_search($this->j,$this->i)<key($this->i)){while(current($this->i)!=$this->j)prev($this->i);}else if(array_search($this->j,$this->i)>key($this->i)){while(current($this->i)!=$this->j)next($this->i);}}if($k&self::NEXT_TOKEN)goto nextToken;throw new VMException('Token handler did not specify an action for the virtual machine',$L,$p);quit:return$n;}public function hasExecuted($o){return isset($this->h[$o]);}public static function globalRegisterTokenHandler($r,TokenHandler$s){if(!isset(self::$f[$r]))self::$f[$r]=array($s);else self::$f[$r][]=$s;}public static function globalUnregisterTokenHandler($r,TokenHandler$s){if(!isset(self::$f[$r])||($t=array_search(self::$g[$r]))===false)return;unset(self::$f[$r][$t]);}public function registerTokenHandler($r,TokenHandler$s){if(!isset($this->g[$r]))$this->g[$r]=array($s);else $this->g[$r][]=$s;}public function unregisterTokenHandler($r,TokenHandler$s){if(!isset($this->g[$r])||($t=array_search($this->g[$r]))===false)return;unset($this->g[$r][$t]);}public function jump(Token$L){$this->j=$L;}public function insertTokenArray($i){reset($i);$u=current($i);while($L=current($this->i)){$v[]=$L;unset($this->i[key($this->i)]);}foreach($i as$L){if(isset($this->g[$L->V])){$t=key($this->g[$L->V]);foreach($this->g[$L->V]as$l){if(!is_object($l))throw new VMException('Handler for token is not a object',$L);$m=clone$L;if(is_callable(array($l,'register')))$l->register($L,$this);$L=$m;}reset($this->g[$L->V]);while(key($this->g[$L->V])!==$t)next($this->g[$L->V]);}$this->i[]=$L;}foreach($v as$L)$this->i[]=$L;$t=array_search($u,$this->i);while(key($this->i)!=$t)prev($this->i);}public function getTokenArray(){return$this->i;}}}namespace Moody{class VMException extends \Exception{private$L;private$p;public function __construct($message,Token$L=null,Token$p=null){$this->message=$message;$this->L=$L;$this->p=$p;}public function __toString(){$B='The Moody Virtual Machine encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->message."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString();if($this->L instanceof Token){$B.="\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;}if($this->p instanceof Token){$B.="\r\n";$B.='Current token before modification through token handlers:'."\r\n";$B.=(string)$this->p;}return$B;}}}namespace Moody\TokenHandlers{use Moody\InstructionHandlerWithRegister;use Moody\InlineInstructionHandler;use Moody\DefaultInstructionHandler;use Moody\TokenHandlerWithRegister;use Moody\TokenVM;use Moody\Token;use Moody\InstructionProcessorException;use Moody\Configuration;use Moody\ConstantContainer;use Moody\InstructionHandler;class InstructionProcessor implements TokenHandlerWithRegister{private static$w=null;private$g=array();private$x=array();const EXECUTE_TYPE_INLINE=1;const EXECUTE_TYPE_DEFAULT=2;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_COMMENT,$this);}public function execute(Token$L,TokenVM$S){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$y=array();$z=0;if(preg_match('~^\s*(\.([A-Za-z_:\\\0-9]+))~',$content,$y)){$i0=strtolower($y[2]);if(isset($this->g[$i0])){if(!($this->g[$i0]instanceof InstructionHandler))throw new InstructionProcessorException('Handler for instruction "'.$y[1].'" does not exist or is not callable',$L);$z=$this->g[$i0]->execute($L,$y[1],$this,$S);goto end;}else if($this->x){foreach($this->x as$s){if(!($s instanceof DefaultInstructionHandler))throw new InstructionProcessorException('Default Handler for instruction "'.$y[1].'" is invalid',$L);if($s->canExecute($L,$y[1],$this)){$z=$s->execute($L,$y[1],$this,$S,self::EXECUTE_TYPE_DEFAULT);goto end;}}}if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$y[1].'"',$L);}else if(Configuration::get('deletecomments',true))$z=TokenVM::DELETE_TOKEN;end:return (TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN)^$z;}public function register(Token$L,TokenVM$S){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$y=array();if(preg_match('~^\s*(\.([A-Za-z_:\\\0-9]+))~',$content,$y)){$i0=strtolower($y[2]);if(isset($this->g[$i0])&&$this->g[$i0]instanceof InstructionHandlerWithRegister)$this->g[$i0]->register($L,$y[1],$this,$S);}}private function inlineExecute(Token$L){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$y=array();if(preg_match('~^\s*(\.([A-Za-z_:\\\0-9]+))~',$content,$y)){$i0=strtolower($y[2]);if(isset($this->g[$i0])){if(!($this->g[$i0]instanceof InlineInstructionHandler))throw new InstructionProcessorException($y[1].' does not support inline execution',$L);return$this->g[$i0]->execute($L,$y[1],$this,null,self::EXECUTE_TYPE_INLINE);}else if($this->x){foreach($this->x as$s){if(!($s instanceof InlineInstructionHandler))continue;if(!($s instanceof DefaultInstructionHandler))throw new InstructionProcessorException('Default handler for instruction "'.$y[1].'" is invalid',$L);if($s->canExecute($L,$y[1],$this))return$s->execute($L,$y[1],$this,null,self::EXECUTE_TYPE_DEFAULT|self::EXECUTE_TYPE_INLINE);}}if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$y[1].'"',$L);}}public function registerHandler($i0,InstructionHandler$s){$this->g[$i0]=$s;}public function registerDefaultHandler(DefaultInstructionHandler$s){$this->x[]=$s;}public function parseArguments(Token$i1,$Q,$i2){if($i2)$i3=str_split($i2);else $i3=array();if(!strpos($i1->content,$Q))throw new InstructionProcessorException('Token corrupted',$i1);if(substr($i1->content,0,2)=='/*')$content=substr($i1->content,2,strrpos($i1->content,'*/')-2);else if(substr($i1->content,0,1)=='#')$content=substr($i1->content,1);else $content=substr($i1->content,2);$i4=substr($content,strpos($content,$Q)+strlen($Q));$Z=Token::tokenize('<?php '.$i4.' ?>','Moody Argument Parser');foreach($Z as$L)if($L->V==T_COMMA)$i5=true;$i6=0;$i7=0;$i8=$i9=array();$i10=null;parseArgs:foreach($Z as$L){if(isset($i11))goto parseArg;if($L->V==T_OPEN_TAG||$L->V==T_CLOSE_TAG||$L->V==T_ROUND_BRACKET_OPEN||$L->V==T_ROUND_BRACKET_CLOSE||$L->V==T_WHITESPACE||in_array($L,$i9))continue;switch($L->V){case T_STRING:if(ConstantContainer::isDefined($L->content))if($i10!==null)$i10.=ConstantContainer::getConstant($L->content);else $i10=ConstantContainer::getConstant($L->content);else $i10.=$L->content;break;case T_CONSTANT_ENCAPSED_STRING:$i10.=eval('return '.$L->content.';');break;case T_TRUE:if($i10!==null)$i10.=true;else $i10=true;break;case T_FALSE:if($i10!==null)$i10.=false;else $i10=false;break;case T_LNUMBER:if($i10!==null)$i10.=(int)$L->content;else $i10=(int)$L->content;break;case T_DNUMBER:if($i10!==null)$i10.=(float)$L->content;else $i10=(float)$L->content;break;case T_NULL:if($i10!==null)$i10.=null;else $i10=null;break;case T_NS_SEPARATOR:$i12="";$i13=key($Z)-1;prev($Z);while($i14=prev($Z)){if($i14->V!=T_STRING)break;end($i8);unset($i8[key($i8)]);$i12=$i14->content.$i12;}while(key($Z)!=$i13)next($Z);$i12.=$L->content;while($i15=next($Z)){if($i15->V!=T_NS_SEPARATOR&&$i15->V!=T_STRING)break;$i12.=$i15->content;$i9[]=$i15;}if(ConstantContainer::isDefined($i12))if($i10!==null)$i10.=ConstantContainer::getConstant($i12);else $i10=ConstantContainer::getConstant($i12);else $i10.=$i12;break;case T_COMMENT:if($i10!==null)$i10.=$this->inlineExecute($L);else $i10=$this->inlineExecute($L);break;case T_COMMA:goto parseArg;default:if($i10!==null)$i10.=$L->content;else $i10=$L->content;}if(isset($i5))continue;parseArg:if(!isset($i3[$i6+$i7])||!$i3[$i6+$i7]){$i8[]=$i10;}else if($i3[$i6+$i7]=='?'){$i7++;goto parseArg;}else {switch(strtolower($i3[$i6+$i7])){default:throw new InstructionProcessorException('Illegal option for argument parser given: '.$i3[$i6+$i7],$i1);case'n':if(is_numeric($i10)&&is_string($i10))$i8[]=(float)$i10;else if(is_int($i10)||is_float($i10)||$i10===null)$i8[]=$i10;else throw new InstructionProcessorException('Illegal argument '.($i6+1).' for '.$Q.': '.gettype($i10).' '.(string)$i10.' given, number expected',$i1);break;case's':if(is_string($i10)||$i10===null)$i8[]=$i10;else throw new InstructionProcessorException('Illegal argument '.($i6+1).' for '.$Q.': '.gettype($i10).' '.(string)$i10.' given, string expected',$i1);break;case'b':if(is_bool($i10)||$i10===null)$i8[]=$i10;else throw new InstructionProcessorException('Illegal argument '.($i6+1).' for '.$Q.': '.gettype($i10).' '.(string)$i10.' given, bool expected',$i1);break;case'x':$i8[]=$i10;}}$i10=null;$i6++;if(isset($i11))break;}if($i10!==null){$i11=true;goto parseArgs;}if((strpos($i2,'?')!==false&&$i6<strpos($i2,'?'))||($i6<count($i3)&&strpos($i2,'?')===false))throw new InstructionProcessorException($Q.' expects '.count($i3).' arguments, '.$i6.' given',$i1);return$i8;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class DocCommentHandler implements TokenHandler{private static$w=null;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_DOC_COMMENT,$this);}public function execute(Token$L,TokenVM$S){if(Configuration::get('deletecomments',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\Token;use Moody\TokenVM;use Moody\TokenHandler;class OpenTagHandler implements TokenHandler{private static$w=null;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_OPEN_TAG,$this);}public function execute(Token$L,TokenVM$S){if($L->content=='<?'||$L->content=='<%')$L->content='<?php ';return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class VariableHandler implements TokenHandler{private static$w=null;private$i16=array();private$i17="A";public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_OBJECT_OPERATOR,$this);}public function execute(Token$L,TokenVM$S){static$i18=array('$this','$_GET','$_POST','$_REQUEST','$_COOKIE','$_ENV','$_SESSION','$_SERVER','$_FILES');if(Configuration::get('compressvariables',false)&&!in_array($L->content,$i18)){if($L->V==T_OBJECT_OPERATOR){if(!Configuration::get('compressproperties',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;$i=$S->getTokenArray();$i19=current($i);if($i19->V!=T_STRING)goto end;while($i20=next($i)){if($i20->V==T_WHITESPACE)continue;if($i20->V==T_ROUND_BRACKET_OPEN)goto end;break;}$i21=$i19;$i21->content='$'.$i21->content;}else $i21=$L;if(!isset($this->i16[$i21->content])){if(!Configuration::get('compressproperties',false)){$i=$S->getTokenArray();prev($i);while($i20=prev($i)){switch($i20->V){case T_STATIC:$i22=true;goto map;default:if(!isset($i22)&&isset($i23))goto end;goto map;case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:$i23=true;case T_WHITESPACE:case T_FORCED_WHITESPACE:continue 2;}}}map:do{$this->mapVariable($i21->content,is_int($this->i17)?'$i'.$this->i17:'$'.$this->i17);if($this->i17==="Z")$this->i17="a";else if($this->i17==="z")$this->i17=0;else if(is_int($this->i17))$this->i17++;else $this->i17=chr(ord($this->i17)+1);}while(count(array_keys($this->i16,$this->i16[$i21->content]))>1);}$i21->content=isset($i19)?substr($this->i16[$i21->content],1):$this->i16[$i21->content];}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}public function mapVariable($i24,$i25){return$this->i16[$i24]=$i25;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Configuration;use Moody\Token;class WhitespaceHandler implements TokenHandler{private static$w=null;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){if(Configuration::get('supportwhitespacedeletion',true)){TokenVM::globalRegisterTokenHandler(T_WHITESPACE,$this);TokenVM::globalRegisterTokenHandler(T_ECHO,$this);TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_GOTO,$this);TokenVM::globalRegisterTokenHandler(T_ELSE,$this);TokenVM::globalRegisterTokenHandler(T_NAMESPACE,$this);TokenVM::globalRegisterTokenHandler(T_CONST,$this);TokenVM::globalRegisterTokenHandler(T_NEW,$this);TokenVM::globalRegisterTokenHandler(T_INSTANCEOF,$this);TokenVM::globalRegisterTokenHandler(T_INSTEADOF,$this);TokenVM::globalRegisterTokenHandler(T_STRING,$this);TokenVM::globalRegisterTokenHandler(T_CLASS,$this);TokenVM::globalRegisterTokenHandler(T_EXTENDS,$this);TokenVM::globalRegisterTokenHandler(T_PUBLIC,$this);TokenVM::globalRegisterTokenHandler(T_PROTECTED,$this);TokenVM::globalRegisterTokenHandler(T_PRIVATE,$this);TokenVM::globalRegisterTokenHandler(T_FINAL,$this);TokenVM::globalRegisterTokenHandler(T_STATIC,$this);TokenVM::globalRegisterTokenHandler(T_FUNCTION,$this);TokenVM::globalRegisterTokenHandler(T_RETURN,$this);TokenVM::globalRegisterTokenHandler(T_CASE,$this);TokenVM::globalRegisterTokenHandler(T_START_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_SEMICOLON,$this);TokenVM::globalRegisterTokenHandler(T_END_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_BREAK,$this);TokenVM::globalRegisterTokenHandler(T_CONTINUE,$this);TokenVM::globalRegisterTokenHandler(T_USE,$this);TokenVM::globalRegisterTokenHandler(T_THROW,$this);TokenVM::globalRegisterTokenHandler(T_INTERFACE,$this);TokenVM::globalRegisterTokenHandler(T_TRAIT,$this);TokenVM::globalRegisterTokenHandler(T_IMPLEMENTS,$this);}}public function execute(Token$L,TokenVM$S){if(Configuration::get('deletewhitespaces',false)){switch($L->V){case T_WHITESPACE:$i=$S->getTokenArray();if(($i20=current($i))&&$i20->V==T_END_HEREDOC)$this->insertForcedWhitespace($S,true);return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;case T_ECHO:case T_RETURN:case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:case T_STATIC:case T_FINAL:case T_CASE:case T_CONTINUE:case T_BREAK:case T_THROW:$i=$S->getTokenArray();if($i20=current($i)){if($i20->V!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i20=next($i))&&$i20->V!=T_CONSTANT_ENCAPSED_STRING&&$i20->V!=T_VARIABLE)$this->insertForcedWhitespace($S);}break;case T_VARIABLE:$i=$S->getTokenArray();if($i20=current($i)){if($i20->V!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i20=next($i))&&($i20->V==T_AS||$i20->V==T_INSTANCEOF))$this->insertForcedWhitespace($S);}break;case T_GOTO:case T_NAMESPACE:case T_CONST:case T_NEW:case T_INSTANCEOF:case T_INSTEADOF:case T_CLASS:case T_EXTENDS:case T_FUNCTION:case T_START_HEREDOC:case T_USE:case T_INTERFACE:case T_TRAIT:case T_IMPLEMENTS:$this->insertForcedWhitespace($S);break;case T_ELSE:$i=$S->getTokenArray();if($i20=current($i)){if($i20->V!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i20=next($i))&&$i20->V!=T_CURLY_OPEN)$this->insertForcedWhitespace($S);}break;case T_STRING:$i=$S->getTokenArray();if($i20=current($i)){if($i20->V!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i20=next($i))&&($i20->V==T_EXTENDS||$i20->V==T_INSTEADOF||$i20->V==T_INSTANCEOF||$i20->V==T_AS||$i20->V==T_IMPLEMENTS))$this->insertForcedWhitespace($S);}break;case T_SEMICOLON:$i=$S->getTokenArray();prev($i);$i20=prev($i);if($i20->V==T_END_HEREDOC)$this->insertForcedWhitespace($S,true);break;case T_END_HEREDOC:$i=$S->getTokenArray();if(($i20=current($i))&&$i20->V!=T_SEMICOLON)$this->insertForcedWhitespace($S,true);break;}}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}private function insertForcedWhitespace(TokenVM$S,$i26=false){$L=new Token;$L->content=$i26?"\r\n":" ";$L->V=T_FORCED_WHITESPACE;$L->X="Moody WhitespaceHandler";$S->insertTokenArray(array($L));}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class BooleanCastHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('bool',$this);InstructionProcessor::getInstance()->registerHandler('boolean',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'x');if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return (bool)$i8[0];$L->content=Token::makeEvaluatable((bool)$i8[0]);return 0;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\DefaultInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class CallHandler implements InlineInstructionHandler,DefaultInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('call',$this);InstructionProcessor::getInstance()->registerDefaultHandler($this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){if($T&InstructionProcessor::EXECUTE_TYPE_DEFAULT){$i27=substr($Q,1);$i8=$R->parseArguments($L,$Q,'');}else {$i8=$R->parseArguments($L,$Q,'s');$i27=$i8[0];}if(strpos($i27,'::')){$i28=explode('::',$i27,2);$i27=array($i28[0],$i28[1]);if(!method_exists($i28[0],$i28[1]))throw new InstructionProcessorException($i8[0].'() does not exist',$L);}else if(!function_exists($i27))throw new InstructionProcessorException($i8[0].'() does not exist',$L);if(!is_callable($i27))throw new InstructionProcessorException(($T&InstructionProcessor::EXECUTE_TYPE_DEFAULT?substr($Q,1):$i8[0]).'() is not callable from the current scope',$L);$i29=$i8;if(!($T&InstructionProcessor::EXECUTE_TYPE_DEFAULT))unset($i29[0]);$D=call_user_func_array($i27,$i29);if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return$D;$L->content=Token::makeEvaluatable($D);return 0;}public function canExecute(Token$L,$Q,InstructionProcessor$R){$Q=substr($Q,1);if(strpos($Q,'::')){$i28=explode('::',$Q,2);if(!method_exists($i28[0],$i28[1]))return false;}else if(!function_exists($Q))return false;return true;}}}namespace Moody\InstructionHandlers{use Moody\Configuration;use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ConfigurationHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('config',$this);InstructionProcessor::getInstance()->registerHandler('configuration',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'s?x');if(!isset($i8[1])){if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return Configuration::get($i8[0],null);$L->content=Token::makeEvaluatable(Configuration::get($i8[0],null));return 0;}else Configuration::set($i8[0],$i8[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\DefaultInstructionHandler;use Moody\InstructionHandler;use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GetConstantHandler implements InlineInstructionHandler,DefaultInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('const',$this);InstructionProcessor::getInstance()->registerHandler('constant',$this);InstructionProcessor::getInstance()->registerHandler('getconstant',$this);InstructionProcessor::getInstance()->registerDefaultHandler($this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){if($T&InstructionProcessor::EXECUTE_TYPE_DEFAULT)$i8=array(substr($Q,1));else $i8=$R->parseArguments($L,$Q,'s');if(!ConstantContainer::isDefined($i8[0]))throw new InstructionProcessorException($Q.': Undefined constant: '.$i8[0],$L);$i30=ConstantContainer::getConstant($i8[0]);if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return$i30;$L->content=Token::makeEvaluatable($i30);return 0;}public function canExecute(Token$L,$Q,InstructionProcessor$R){if($R->parseArguments($L,$Q,''))return false;if(!ConstantContainer::isDefined(substr($Q,1)))return false;return true;}}}namespace Moody\InstructionHandlers{use Moody\DefaultInstructionHandler;use Moody\ConstantContainer;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;use Moody\InstructionProcessorException;class DefineHandler implements InstructionHandler,DefaultInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('define',$this);InstructionProcessor::getInstance()->registerHandler('def',$this);InstructionProcessor::getInstance()->registerHandler('d',$this);InstructionProcessor::getInstance()->registerDefaultHandler($this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){if($T&InstructionProcessor::EXECUTE_TYPE_DEFAULT){$i8=$R->parseArguments($L,$Q,'sx');$G=substr($Q,1);switch($i8[0]){case'=':ConstantContainer::define($G,$i8[1]);break;case'.=':ConstantContainer::define($G,ConstantContainer::getConstant($G).$i8[1]);break;case'+=':case'-=':case'*=':case'/=':case'|=':case'&=':case'^=':$i31=array('(',')','+','-','*','/','|','&','^');$i8=$R->parseArguments($L,$Q,'sn?snsnsnsnsnsnsnsnsnsnsn');foreach($i8 as$i32=>$i33){if(!$i32)continue;if(!is_int($i33)&&!in_array($i33,$i31))throw new InstructionProcessorException('Math syntax error');$i34.=$i33;}if(($D=eval('return ('.$i34.');'))===false)throw new InstructionProcessorException('Math syntax error');switch($i8[0]){case'+=':ConstantContainer::define($G,ConstantContainer::getConstant($G)+$D);break;case'-=':ConstantContainer::define($G,ConstantContainer::getConstant($G)-$D);break;case'*=':ConstantContainer::define($G,ConstantContainer::getConstant($G)*$D);break;case'/=':ConstantContainer::define($G,ConstantContainer::getConstant($G)/$D);break;case'|=':ConstantContainer::define($G,ConstantContainer::getConstant($G)|$D);break;case'^=':ConstantContainer::define($G,ConstantContainer::getConstant($G)^$D);break;case'&=':ConstantContainer::define($G,ConstantContainer::getConstant($G)&$D);break;}}}else {$i8=$R->parseArguments($L,$Q,'sx');ConstantContainer::define($i8[0],$i8[1]);}return TokenVM::DELETE_TOKEN;}public function canExecute(Token$L,$Q,InstructionProcessor$R){$i8=$R->parseArguments($L,$Q,'');$i31=array('=','.=','+=','-=','*=','/=','|=','&=','^=');if(in_array($i8[0],$i31)&&!($i8[0]!='='&&!ConstantContainer::isDefined(substr($Q,1))))return true;return false;}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EchoHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('echo',$this);InstructionProcessor::getInstance()->registerHandler('print',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'x');foreach($i8 as$i33)echo (string)$i33;return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('else',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$Q.' - Probably you forgot an endif?',$L);$i35=$i0;}}foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getEndToken()==$L){if($i0->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i35->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$S->jump($i35->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return TokenVM::DELETE_TOKEN;}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){MultiTokenInstruction::setEndToken($L,'if');new MultiTokenInstruction($L,'if');}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseIfHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('elseif',$this);InstructionProcessor::getInstance()->registerHandler('elif',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$Q.' - Probably you forgot an endif?',$L);$i35=$i0;}}foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getEndToken()==$L){if($i0->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i35->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$S->jump($i35->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return IfHandler::getInstance()->execute($L,$Q,$R,$S);}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){MultiTokenInstruction::setEndToken($L,'if');new MultiTokenInstruction($L,'if');}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\ConstantContainer;class EndLongDefineHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('endlongdefine',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){return TokenVM::DELETE_TOKEN;}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){MultiTokenInstruction::setEndToken($L,'longDefine');}}}namespace Moody\InstructionHandlers{use Moody\TokenHandlers\InstructionProcessor;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenVM;use Moody\MultiTokenInstruction;class EndIfHandler implements InstructionHandlerWithRegister{private static$w;private function __construct(){InstructionProcessor::getInstance()->registerHandler('endif',$this);}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){return TokenVM::DELETE_TOKEN;}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){MultiTokenInstruction::setEndToken($L,'if');}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EvalHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('eval',$this);InstructionProcessor::getInstance()->registerHandler('evaluate',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'s?bb');if(!isset($i8[1])||$i8[1]===true){if(!strpos($i8[0],'<?')){$i36=true;$i=Token::tokenize('<?php '.$i8[0].' ?>',$Q.' code');}else $i=Token::tokenize($i8[0],$Q.' code');$S=new TokenVM();try{$i=$S->execute($i);}catch(\Exception$i37){echo (string)$i37."\r\n";exit;}if(isset($i36)){reset($i);unset($i[key($i)]);end($i);unset($i[key($i)]);}$i8[0]="";foreach($i as$i38){$i8[0].=$i38->content;}}$i39=eval($i8[0]);if($i39!==null){if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return$i39;$L->content=!isset($i8[2])||$i8[2]===true?Token::makeEvaluatable($i39):$i39;return 0;}return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ExitHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('exit',$this);InstructionProcessor::getInstance()->registerHandler('halt',$this);InstructionProcessor::getInstance()->registerHandler('quit',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){return TokenVM::QUIT|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GotoHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('goto',$this);InstructionProcessor::getInstance()->registerHandler('jump',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'s');$i40=LabelHandler::getLabel($i8[0]);if(!($i40 instanceof Token))throw new InstructionProcessorException('Jump to undefined label '.$i8[0],$L);$S->jump($i40);return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_ELSE;use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('if',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'x');foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$Q.' - Probably you forgot an endif?',$L);$i41="";$i39=false;foreach($i8 as$i33){if(is_string($i33)&&strlen($i33)&&strtolower($i33)!=="true"&&strtolower($i33)!=="false"){$Z=Token::tokenize('<?php '.$i33.' ?>');if($Z[1]->V==T_STRING)$i33=Token::makeEvaluatable($i33);}else if(is_string($i33)&&!strlen($i33))$i33="''";if($i33===true)$i33="true";else if($i33===false)$i33="false";else if($i33===null)$i33="null";$i41.=$i33;}$i39=eval('return (int) (bool) ('.$i41.');');if($i39===1){$i0->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);return TokenVM::DELETE_TOKEN;}if($i39===false)throw new InstructionProcessorException('If-condition '.$i41.' is invalid',$L);$S->jump($i0->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){new MultiTokenInstruction($L,'if');}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfDefHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifdef',$this);InstructionProcessor::getInstance()->registerHandler('ifdefined',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'s');foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$Q.' - Probably you forgot an endif?',$L);if(ConstantContainer::isDefined($i8[0])){$i0->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);return TokenVM::DELETE_TOKEN;}$S->jump($i0->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){new MultiTokenInstruction($L,'if');}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfNotDefHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifndef',$this);InstructionProcessor::getInstance()->registerHandler('ifnotdefined',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'s');foreach(MultiTokenInstruction::getAll('if')as$i0){if($i0->getToken()==$L){if(!($i0->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$Q.' - Probably you forgot an endif?',$L);if(!ConstantContainer::isDefined($i8[0])){$i0->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);return TokenVM::DELETE_TOKEN;}$S->jump($i0->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){new MultiTokenInstruction($L,'if');}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IncludeHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('include',$this);InstructionProcessor::getInstance()->registerHandler('inc',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'s');if(!file_exists($i8[0]))throw new InstructionProcessorException($i8[0].' does not exist',$L);if(!is_readable($i8[0]))throw new InstructionProcessorException($i8[0].' is not readable - Make sure Moody has the rights to read it',$L);$c=file_get_contents($i8[0]);$Z=Token::tokenize($c,$i8[0]);switch($Z[0]->V){case T_OPEN_TAG:unset($Z[0]);break;case T_INLINE_HTML:$L=new Token;$L->V=T_CLOSE_TAG;$L->content=" ?>";$i42=array($L);foreach($Z as$L)$i42[]=$L;$Z=$i42;}end($Z);switch(current($Z)->V){case T_CLOSE_TAG:unset($Z[key($Z)]);break;case T_INLINE_HTML:$L=new Token;$L->V=T_OPEN_TAG;$L->content="<?php ";$Z[]=$L;}$S->insertTokenArray($Z);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IsDefinedHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('isdefined',$this);InstructionProcessor::getInstance()->registerHandler('isdef',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'s');if(ConstantContainer::isDefined($i8[0])){if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return true;$L->content=Token::makeEvaluatable(true);}else {if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return false;$L->content=Token::makeEvaluatable(false);}return 0;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class LabelHandler implements InstructionHandlerWithRegister{private static$w=null;private static$i43=array();private function __construct(){InstructionProcessor::getInstance()->registerHandler('label',$this);InstructionProcessor::getInstance()->registerHandler('jumplabel',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){return TokenVM::DELETE_TOKEN;}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'s');if(isset(self::$i43[$i8[0]]))throw new InstructionProcessorException('Double definition of jump label "'.$i8[0].'" (first definition at '.self::$i43[$i8[0]]->X.':'.self::$i43[$i8[0]]->Y,$L);self::$i43[$i8[0]]=$L;}public static function getLabel($I){if(isset(self::$i43[$I]))return self::$i43[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;use Moody\InstructionProcessorException;use Moody\MultiTokenInstruction;use Moody\ConstantContainer;class LongDefineHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('longdefine',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'s');foreach(MultiTokenInstruction::getAll('longDefine')as$i0){if($i0->getToken()==$L){$M=$i0->getEndToken();if(!($M instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$Q.' - Probably you forgot an endLongDefine?',$L);$Z=$S->getTokenArray();$i44="";while($L=current($Z)){if($L==$M){ConstantContainer::define($i8[0],$i44);$S->jump($L);return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}$i44.=$L->content;next($Z);}}}}public function register(Token$L,$Q,InstructionProcessor$R,TokenVM$S){new MultiTokenInstruction($L,'longDefine');}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class MacroHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('macro',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){if(strtolower($Q)=='.macro'){if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)throw new InstructionProcessorException($Q.' does not support inline execution',$L);$i8=$R->parseArguments($L,$Q,'ss');if(!strlen($i8[0]))throw new InstructionProcessorException('Macro name cannot be empty',$L);$i45=new Macro(strtolower($i8[0]),$i8[1]);$R->registerHandler(strtolower($i8[0]),$this);unset($i8[0],$i8[1]);foreach($i8 as$i33)$i45->addArgument($i33);return TokenVM::DELETE_TOKEN;}$i46=substr(strtolower($Q),1);$i45=Macro::getMacro($i46);if(!$i45)throw new InstructionProcessorException('Call to bad macro',$L);$i3="";for($i47=0;$i47<$i45->numArgs();$i47++)$i3.='x';$i8=$R->parseArguments($L,$Q,$i3);if($T&InstructionProcessor::EXECUTE_TYPE_INLINE){$code="";foreach($i45->buildCode($i8)as$L)$code.=$L->content;return$code;}else $S->insertTokenArray($i45->buildCode($i8));return TokenVM::DELETE_TOKEN;}}class Macro{private$I="";private$code="";private$i48=array();private static$i49=array();public function __construct($I,$code){$this->I=$I;$this->code=$code;self::$i49[$I]=$this;}public function addArgument($i50){$this->i48[]=$i50;}public function numArgs(){return count($this->i48);}public function buildCode($i8=array()){$i47=0;$code=$this->code;foreach($this->i48 as$i33){$code=str_replace($i33,$i8[$i47],$code);$i47++;}$Z=Token::tokenize('<?php '.$code,'Macro '.$this->I);unset($Z[0]);return$Z;}public static function getMacro($I){if(isset(self::$i49[$I]))return self::$i49[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenHandlers\VariableHandler;use Moody\TokenVM;class MapVariableHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('mapvariable',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'ss');if(!class_exists('Moody\TokenHandlers\VariableHandler'))throw new InstructionProcessorException('Variable mapping is not available as the token handler for T_VARIABLE is not currently loaded',$L);VariableHandler::getInstance()->mapVariable($i8[0],$i8[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class NumberCastHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('number',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'x');if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return (float)$i8[0];$L->content=Token::makeEvaluatable((float)$i8[0]);return 0;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class RaiseErrorHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('raiseerror',$this);InstructionProcessor::getInstance()->registerHandler('error',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'s');throw new InstructionProcessorException($i8[0],$L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InlineInstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class StringCastHandler implements InlineInstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('string',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S=null,$T=0){$i8=$R->parseArguments($L,$Q,'x');if($T&InstructionProcessor::EXECUTE_TYPE_INLINE)return (string)$i8[0];$L->content=Token::makeEvaluatable((string)$i8[0]);return 0;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class UndefineHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('undef',$this);InstructionProcessor::getInstance()->registerHandler('undefine',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$Q,InstructionProcessor$R,TokenVM$S){$i8=$R->parseArguments($L,$Q,'s');if(!ConstantContainer::isDefined($i8[0]))throw new InstructionProcessorException($Q.': Undefined constant: '.$i8[0],$L);ConstantContainer::undefine($i8[0]);return TokenVM::DELETE_TOKEN;}}}?>