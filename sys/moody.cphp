<?php namespace Moody{class Configuration{private static$A=array();public static function load($B){}public static function set($C,$D){return self::$A[$C]=$D;}public static function get($C,$E=null){if(isset(self::$A[$C]))return self::$A[$C];return$E;}}}namespace Moody{class ConstantContainer{private static$F=array();public static function initialize(){foreach(get_defined_constants()as$G=>$H)if(!self::isDefined($G))self::define($G,$H);}public static function getConstant($I){$I=strtolower($I);if(isset(self::$F[$I]))return self::$F[$I];}public static function isDefined($I){return isset(self::$F[strtolower($I)]);}public static function define($I,$D){self::$F[strtolower($I)]=$D;}public static function undefine($I){$I=strtolower($I);if(isset(self::$F[$I]))unset(self::$F[$I]);}}}namespace Moody{const END_TOKEN_NO_EXECUTE=1;const END_TOKEN_EXECUTE=2;class IfInstruction{private static$J=array();private static$K=array();private$L;private$M;private$N=END_TOKEN_EXECUTE;public function __construct(Token$L){self::$J[]=$this;self::$K[]=$this;$this->L=$L;}public static function setEndToken(Token$L){if(!self::$K)throw new InstructionProcessorException('Endif or Else while no if is active',$L);end(self::$K);self::$K[key(self::$K)]->M=$L;unset(self::$K[key(self::$K)]);}public function getToken(){return$this->L;}public function getEndToken(){return$this->M;}public function setEndTokenAction($O){$this->N=$O;}public function getEndTokenAction(){return$this->N;}public static function getAll(){return self::$J;}}}namespace Moody{interface InstructionHandler{public static function getInstance();public function execute(Token$L,$P,TokenHandlers\InstructionProcessor$Q,TokenVM$R);}interface InstructionHandlerWithRegister extends InstructionHandler{public function register(Token$L,$P,TokenHandlers\InstructionProcessor$Q,TokenVM$R);}}namespace Moody{class InstructionProcessorException extends \Exception{private$L;public function __construct($message,Token$L){$this->message=$message;$this->L=$L;}public function __toString(){$B='The Moody Instruction Processor encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->message."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString()."\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;return$B;}}}namespace Moody{class MoodyException extends \Exception{public function __toString(){$B='Moody encountered an unexpected error and can not continue.'."\r\n";$B.='Exception message: '.$this->message."\r\n";$B.='System backtrace: '."\r\n".$this->getTraceAsString();return$B;}}}namespace Moody{define('T_DOT',16384);define('T_UNKNOWN',16385);define('T_ROUND_BRACKET_OPEN',16386);define('T_ROUND_BRACKET_CLOSE',16387);define('T_COMMA',16388);define('T_TRUE',16389);define('T_FALSE',16390);define('T_NULL',16391);define('T_FORCED_WHITESPACE',16392);define('T_SEMICOLON',16393);if(!defined('T_INSTEADOF'))define('T_INSTEADOF',32768);if(!defined('T_TRAIT'))define('T_TRAIT',32769);class Token{public$S=0;public$T=0;public$U=0;public$V="Unknown";public$W=0;public$content="";private static$X=0;private static$Y=0;private static$Z=array(T_ABSTRACT=>"T_ABSTRACT",T_AND_EQUAL=>"T_AND_EQUAL",T_ARRAY=>"T_ARRAY",T_ARRAY_CAST=>"T_ARRAY_CAST",T_AS=>"T_AS",T_BAD_CHARACTER=>"T_BAD_CHARACTER",T_BOOLEAN_AND=>"T_BOOLEAN_AND",T_BOOLEAN_OR=>"T_BOOLEAN_OR",T_BOOL_CAST=>"T_BOOL_CAST",T_BREAK=>"T_BREAK",T_CASE=>"T_CASE",T_CATCH=>"T_CATCH",T_CHARACTER=>"T_CHARACTER",T_CLASS=>"T_CLASS",T_CLASS_C=>"T_CLASS_C",T_CLONE=>"T_CLONE",T_CLOSE_TAG=>"T_CLOSE_TAG",T_COMMA=>"T_COMMA",T_COMMENT=>"T_COMMENT",T_CONCAT_EQUAL=>"T_CONCAT_EQUAL",T_CONST=>"T_CONST",T_CONSTANT_ENCAPSED_STRING=>"T_CONSTANT_ENCAPSED_STRING",T_CONTINUE=>"T_CONTINUE",T_CURLY_OPEN=>"T_CURLY_OPEN",T_DEC=>"T_DEC",T_DECLARE=>"T_DECLARE",T_DEFAULT=>"T_DEFAULT",T_DIR=>"T_DIR",T_DIV_EQUAL=>"T_DIV_EQUAL",T_DNUMBER=>"T_DNUMBER",T_DO=>"T_DO",T_DOC_COMMENT=>"T_DOC_COMMENT",T_DOLLAR_OPEN_CURLY_BRACES=>"T_DOLLAR_OPEN_CURLY_BRACES",T_DOT=>"T_DOT",T_DOUBLE_ARROW=>"T_DOUBLE_ARROW",T_DOUBLE_CAST=>"T_DOUBLE_CAST",T_DOUBLE_COLON=>"T_DOUBLE_COLON",T_ECHO=>"T_ECHO",T_ELSE=>"T_ELSE",T_ELSEIF=>"T_ELSEIF",T_EMPTY=>"T_EMPTY",T_ENCAPSED_AND_WHITESPACE=>"T_ENCAPSED_AND_WHITESPACE",T_ENDDECLARE=>"T_ENDDECLARE",T_ENDFOR=>"T_ENDFOR",T_ENDFOREACH=>"T_ENDFOREACH",T_ENDIF=>"T_ENDIF",T_ENDSWITCH=>"T_ENDSWITCH",T_ENDWHILE=>"T_ENDWHILE",T_END_HEREDOC=>"T_END_HEREDOC",T_EVAL=>"T_EVAL",T_EXIT=>"T_EXIT",T_EXTENDS=>"T_EXTENDS",T_FALSE=>"T_FALSE",T_FILE=>"T_FILE",T_FINAL=>"T_FINAL",T_FOR=>"T_FOR",T_FORCED_WHITESPACE=>"T_FORCED_WHITESPACE",T_FOREACH=>"T_FOREACH",T_FUNCTION=>"T_FUNCTION",T_FUNC_C=>"T_FUNC_C",T_GLOBAL=>"T_GLOBAL",T_GOTO=>"T_GOTO",T_HALT_COMPILER=>"T_HALT_COMPILER",T_OPEN_TAG=>"T_OPEN_TAG",T_ROUND_BRACKET_CLOSE=>"T_ROUND_BRACKET_CLOSE",T_ROUND_BRACKET_OPEN=>"T_ROUND_BRACKET_OPEN",T_SEMICOLON=>"T_SEMICOLON",T_STRING=>"T_STRING",T_TRUE=>"T_TRUE",T_UNKNOWN=>"T_UNKNOWN",T_VARIABLE=>"T_VARIABLE",T_WHITESPACE=>"T_WHITESPACE");public function __construct(){$this->S=self::$X++;}public static function tokenize($code,$a=null){$X=token_get_all($code);if(!$X)throw new MoodyException('Token::tokenize() was called with a non-tokenizable code');$b=array();self::$Y++;foreach($X as$L){$c=new Token;$c->U=self::$Y;if($a)$c->V=$a;if(is_array($L)){$c->T=$L[0];$c->content=$L[1];$c->W=$L[2];if(strtolower($c->content)=='true')$c->T=T_TRUE;else if(strtolower($c->content)=='false')$c->T=T_FALSE;else if(strtolower($c->content)=='null')$c->T=T_NULL;}else {$c->content=$L;$c->W=-1;switch($L){case'.':$c->T=T_DOT;break;case'(':$c->T=T_ROUND_BRACKET_OPEN;break;case')':$c->T=T_ROUND_BRACKET_CLOSE;break;case',':$c->T=T_COMMA;break;case';':$c->T=T_SEMICOLON;break;default:$c->T=T_UNKNOWN;}}$b[]=$c;}return$b;}public function __toString(){$B='Type: '.(isset(self::$Z[$this->T])?self::$Z[$this->T]:$this->T)."\r\n";$B.='Content: '.$this->content."\r\n";if($this->V!="Unknown"){$B.='Origin: '.$this->V."\r\n";$B.='Line: '.$this->W."\r\n";}return$B;}public static function makeEvaluatable($D){if(is_string($D))return"'".str_replace("'","\'",$D)."'";if(is_int($D)||is_float($D))return$D;if($D===true)return"true";if($D===false)return"false";if($D===null)return"null";}}}namespace Moody{interface TokenHandler{public static function getInstance();public function execute(Token$L,TokenVM$R);}interface TokenHandlerWithRegister extends TokenHandler{public function register(Token$L,TokenVM$R);}}namespace Moody{class TokenVM{const NEXT_TOKEN=1;const QUIT=2;const NEXT_HANDLER=4;const ERROR=8;const REEXECUTE_TOKEN=16;const REEXECUTE_HANDLER=32;const JUMP=64;const CLEAR_RETVAL=128;const CLEAR_ERROR=256;const DELETE_TOKEN=512;private static$d=array();private$e=array();private$f=array();private$g=array();private$h=null;public function __construct(){$this->e=self::$d;}public function execute($g){if(!$g)throw new VMException('Virtual machine received empty token array');$this->g=$g;$i=0;foreach($this->g as$L){if(isset($this->e[$L->T])){foreach($this->e[$L->T]as$j){if(!is_object($j))throw new VMException('Handler for token is not a object',$L);$k=clone$L;if(is_callable(array($j,'register')))$j->register($L,$this);$L=$k;}reset($this->e[$L->T]);}}reset($this->g);$l=array();nextToken:if(!($L=current($this->g)))goto quit;$m=$L->S;next($this->g);$n=clone$L;executeToken:if(!is_int($m))throw new VMException('Token ID '.$m.' is not an integer');if(!($L instanceof Token))throw new VMException('Element '.$m.' is not a valid token');$this->f[$m]=true;$i=0;nextHandler:if(isset($this->e[$L->T])){if(current($this->e[$L->T])!==false){$j=current($this->e[$L->T]);next($this->e[$L->T]);}else {reset($this->e[$L->T]);goto doRetval;}}else {$l[]=$L;goto nextToken;}executeHandler:if(!is_object($j))throw new VMException('Handler for token is not a object',$L);if(!is_callable(array($j,'execute')))throw new VMException('The execute method of the token handler does not exist or is not callable from the virtual machines\' scope',$L);$o=$j->execute($L,$this);if($o&self::CLEAR_RETVAL)$i=$o;else $i|=$o;doRetval:if($i&self::REEXECUTE_HANDLER){$i^=self::REEXECUTE_HANDLER;goto executeHandler;}if($i&self::NEXT_HANDLER){$i^=self::NEXT_HANDLER;goto nextHandler;}if($i&self::REEXECUTE_TOKEN){$i^=self::REEXECUTE_TOKEN;goto executeToken;}if(!($i&self::DELETE_TOKEN))$l[]=$L;if($i&self::QUIT)goto quit;if($i&self::ERROR&&!($i&self::CLEAR_ERROR))throw new VMException('Token handler returned an error',$L,$n);if($i&self::JUMP){if(!($this->h instanceof Token))throw new VMException('Cannot jump to new token as it is not a token',$L,$n);if(!in_array($this->h,$this->g))throw new VMException('Cannot jump to new token as it is not specified in current token array',$L,$n);if(array_search($this->h,$this->g)<key($this->g)){while(current($this->g)!=$this->h)prev($this->g);}else if(array_search($this->h,$this->g)>key($this->g)){while(current($this->g)!=$this->h)next($this->g);}}if($i&self::NEXT_TOKEN)goto nextToken;throw new VMException('Token handler did not specify an action for the virtual machine',$L,$n);quit:return$l;}public function hasExecuted($m){return isset($this->$f[$m]);}public static function globalRegisterTokenHandler($p,TokenHandler$q){if(!isset(self::$d[$p]))self::$d[$p]=array($q);else self::$d[$p][]=$q;}public static function globalUnregisterTokenHandler($p,TokenHandler$q){if(!isset(self::$d[$p])||($r=array_search(self::$e[$p]))===false)return;unset(self::$d[$p][$r]);}public function registerTokenHandler($p,TokenHandler$q){if(!isset($this->e[$p]))$this->e[$p]=array($q);else $this->e[$p][]=$q;}public function unregisterTokenHandler($p,TokenHandler$q){if(!isset($this->e[$p])||($r=array_search($this->e[$p]))===false)return;unset($this->e[$p][$r]);}public function jump(Token$L){$this->h=$L;}public function insertTokenArray($g){reset($g);$s=current($g);while($L=current($this->g)){$t[]=$L;unset($this->g[key($this->g)]);}foreach($g as$L){if(isset($this->e[$L->T])){$r=key($this->e[$L->T]);foreach($this->e[$L->T]as$j){if(!is_object($j))throw new VMException('Handler for token is not a object',$L);$k=clone$L;if(is_callable(array($j,'register')))$j->register($L,$this);$L=$k;}reset($this->e[$L->T]);while(key($this->e[$L->T])!==$r)next($this->e[$L->T]);}$this->g[]=$L;}foreach($t as$L)$this->g[]=$L;$r=array_search($s,$this->g);while(key($this->g)!=$r)prev($this->g);}public function getTokenArray(){return$this->g;}}}namespace Moody{class VMException extends \Exception{private$L;private$n;public function __construct($message,Token$L=null,Token$n=null){$this->message=$message;$this->L=$L;$this->n=$n;}public function __toString(){$B='The Moody Virtual Machine encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->message."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString();if($this->L instanceof Token){$B.="\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;}if($this->n instanceof Token){$B.="\r\n";$B.='Current token before modification through token handlers:'."\r\n";$B.=(string)$this->n;}return$B;}}}namespace Moody\TokenHandlers{use Moody\TokenHandlerWithRegister;use Moody\TokenVM;use Moody\Token;use Moody\InstructionProcessorException;use Moody\Configuration;use Moody\ConstantContainer;use Moody\InstructionHandler;class InstructionProcessor implements TokenHandlerWithRegister{private static$u=null;private$e=array();public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_COMMENT,$this);}public function execute(Token$L,TokenVM$R){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$v=array();$w=0;if(preg_match('~^\s*(\.([A-Za-z_]+))~',$content,$v)){$x=strtolower($v[2]);if(isset($this->e[$x])){if(!is_callable(array($this->e[$x],'execute')))throw new InstructionProcessorException('Handler for instruction "'.$v[1].'" does not exist or is not callable',$L);$w=$this->e[$x]->execute($L,$v[1],$this,$R);}else if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$v[1].'"',$L);}else if(Configuration::get('deletecomments',false))$w=TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|$w;}public function register(Token$L,TokenVM$R){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$v=array();if(preg_match('~^\s*(\.([A-Za-z_]+))~',$content,$v)){$x=strtolower($v[2]);if(isset($this->e[$x])){if(is_callable(array($this->e[$x],'register')))$this->e[$x]->register($L,$v[1],$this,$R);}}}private function inlineExecute(Token$L){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$v=array();if(preg_match('~^\s*(\.([A-Za-z_]+))~',$content,$v)){$x=strtolower($v[2]);if(isset($this->e[$x])){if(!is_callable(array($this->e[$x],'inlineExecute')))throw new InstructionProcessorException('Handler for instruction "'.$v[1].'" does not support inline execution or is not callable',$L);$this->e[$x]->inlineExecute($L,$v[1],$this);}else if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$v[1].'"',$L);}}public function registerHandler($x,InstructionHandler$q){$this->e[$x]=$q;}public function parseArguments(Token$y,$P,$z){if($z)$i0=str_split($z);else $i0=array();if(!strpos($y->content,$P))throw new InstructionProcessorException('Token corrupted',$y);if(substr($y->content,0,2)=='/*')$content=substr($y->content,2,strrpos($y->content,'*/')-2);else if(substr($y->content,0,1)=='#')$content=substr($y->content,1);else $content=substr($y->content,2);$i1=substr($content,strpos($content,$P)+strlen($P));$X=Token::tokenize('<?php '.$i1.' ?>','Moody Argument Parser');$i2=0;$i3=0;$i4=$i5=array();foreach($X as$L){if($L->T==T_OPEN_TAG||$L->T==T_CLOSE_TAG||$L->T==T_ROUND_BRACKET_OPEN||$L->T==T_ROUND_BRACKET_CLOSE||$L->T==T_COMMA||$L->T==T_WHITESPACE||in_array($L,$i5))continue;switch($L->T){case T_STRING:if(ConstantContainer::isDefined($L->content))$i6=ConstantContainer::getConstant($L->content);else $i6=$L->content;break;case T_CONSTANT_ENCAPSED_STRING:$i6=eval('return '.$L->content.';');break;case T_TRUE:$i6=true;break;case T_FALSE:$i6=false;break;case T_LNUMBER:$i6=(int)$L->content;break;case T_DNUMBER:$i6=(float)$L->content;break;case T_NULL:$i6=null;break;case T_NS_SEPARATOR:$i7="";$i8=key($X)-1;prev($X);while($i9=prev($X)){if($i9->T!=T_STRING)break;end($i4);unset($i4[key($i4)]);$i7=$i9->content.$i7;}while(key($X)!=$i8)next($X);$i7.=$L->content;while($i10=next($X)){if($i10->T!=T_NS_SEPARATOR&&$i10->T!=T_STRING)break;$i7.=$i10->content;$i5[]=$i10;}if(ConstantContainer::isDefined($i7))$i6=ConstantContainer::getConstant($i7);else $i6=$i7;break;case T_COMMENT:$this->inlineExecute($L);default:$i6=$L->content;}parseArg:if(!isset($i0[$i2+$i3])||!$i0[$i2+$i3]){$i4[]=$i6;}else if($i0[$i2+$i3]=='?'){$i3++;goto parseArg;}else {switch(strtolower($i0[$i2+$i3])){default:throw new InstructionProcessorException('Illegal option for argument parser given: '.$i0[$i2+$i3],$y);case'n':if(is_numeric($i6)&&is_string($i6))$i4[]=(float)$i6;else if(is_int($i6)||is_float($i6)||$i6===null)$i4[]=$i6;else throw new InstructionProcessorException('Illegal argument '.($i2+1).' for '.$P.': '.$L->content.' given, number expected',$y);break;case's':if((is_string($i6)&&($L->T==T_STRING||$L->T==T_CONSTANT_ENCAPSED_STRING))||$i6===null)$i4[]=$i6;else throw new InstructionProcessorException('Illegal argument '.($i2+1).' for '.$P.': '.$L->content.' given, string expected',$y);break;case'b':if(is_bool($i6)||$i6===null)$i4[]=$i6;else throw new InstructionProcessorException('Illegal argument '.($i2+1).' for '.$P.': '.$L->content.' given, bool expected',$y);break;case'x':$i4[]=$i6;}}$i2++;}if((strpos($z,'?')!==false&&$i2<strpos($z,'?'))||($i2<count($i0)&&strpos($z,'?')===false))throw new InstructionProcessorException($P.' expects '.count($i0).' arguments, '.$i2.' given',$y);return$i4;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class DocCommentHandler implements TokenHandler{private static$u=null;public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_DOC_COMMENT,$this);}public function execute(Token$L,TokenVM$R){if(Configuration::get('deletecomments',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\Token;use Moody\TokenVM;use Moody\TokenHandler;class OpenTagHandler implements TokenHandler{private static$u=null;public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_OPEN_TAG,$this);}public function execute(Token$L,TokenVM$R){if($L->content=='<?'||$L->content=='<%')$L->content='<?php ';return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class VariableHandler implements TokenHandler{private static$u=null;private$i11=array();private$i12="A";public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_OBJECT_OPERATOR,$this);}public function execute(Token$L,TokenVM$R){static$i13=array('$this','$_GET','$_POST','$_REQUEST','$_COOKIE','$_ENV','$_SESSION','$_SERVER','$_FILES');if(Configuration::get('compressvariables',false)&&!in_array($L->content,$i13)){if($L->T==T_OBJECT_OPERATOR){if(!Configuration::get('compressproperties',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;$g=$R->getTokenArray();$i14=current($g);if($i14->T!=T_STRING)goto end;while($i15=next($g)){if($i15->T==T_WHITESPACE)continue;if($i15->T==T_ROUND_BRACKET_OPEN)goto end;break;}$i16=$i14;$i16->content='$'.$i16->content;}else $i16=$L;if(!isset($this->i11[$i16->content])){if(!Configuration::get('compressproperties',false)){$g=$R->getTokenArray();prev($g);while($i15=prev($g)){switch($i15->T){case T_STATIC:$i17=true;goto map;default:if(!isset($i17)&&isset($i18))goto end;goto map;case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:$i18=true;case T_WHITESPACE:case T_FORCED_WHITESPACE:continue 2;}}}map:do{$this->mapVariable($i16->content,is_int($this->i12)?'$i'.$this->i12:'$'.$this->i12);if($this->i12==="Z")$this->i12="a";else if($this->i12==="z")$this->i12=0;else if(is_int($this->i12))$this->i12++;else $this->i12=chr(ord($this->i12)+1);}while(count(array_keys($this->i11,$this->i11[$i16->content]))>1);}$i16->content=isset($i14)?substr($this->i11[$i16->content],1):$this->i11[$i16->content];}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}public function mapVariable($i19,$i20){return$this->i11[$i19]=$i20;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Configuration;use Moody\Token;class WhitespaceHandler implements TokenHandler{private static$u=null;public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}private function __construct(){if(Configuration::get('supportwhitespacedeletion',true)){TokenVM::globalRegisterTokenHandler(T_WHITESPACE,$this);TokenVM::globalRegisterTokenHandler(T_ECHO,$this);TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_GOTO,$this);TokenVM::globalRegisterTokenHandler(T_ELSE,$this);TokenVM::globalRegisterTokenHandler(T_NAMESPACE,$this);TokenVM::globalRegisterTokenHandler(T_CONST,$this);TokenVM::globalRegisterTokenHandler(T_NEW,$this);TokenVM::globalRegisterTokenHandler(T_INSTANCEOF,$this);TokenVM::globalRegisterTokenHandler(T_INSTEADOF,$this);TokenVM::globalRegisterTokenHandler(T_STRING,$this);TokenVM::globalRegisterTokenHandler(T_CLASS,$this);TokenVM::globalRegisterTokenHandler(T_EXTENDS,$this);TokenVM::globalRegisterTokenHandler(T_PUBLIC,$this);TokenVM::globalRegisterTokenHandler(T_PROTECTED,$this);TokenVM::globalRegisterTokenHandler(T_PRIVATE,$this);TokenVM::globalRegisterTokenHandler(T_FINAL,$this);TokenVM::globalRegisterTokenHandler(T_STATIC,$this);TokenVM::globalRegisterTokenHandler(T_FUNCTION,$this);TokenVM::globalRegisterTokenHandler(T_RETURN,$this);TokenVM::globalRegisterTokenHandler(T_CASE,$this);TokenVM::globalRegisterTokenHandler(T_START_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_SEMICOLON,$this);TokenVM::globalRegisterTokenHandler(T_END_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_BREAK,$this);TokenVM::globalRegisterTokenHandler(T_CONTINUE,$this);TokenVM::globalRegisterTokenHandler(T_USE,$this);TokenVM::globalRegisterTokenHandler(T_THROW,$this);TokenVM::globalRegisterTokenHandler(T_INTERFACE,$this);TokenVM::globalRegisterTokenHandler(T_TRAIT,$this);TokenVM::globalRegisterTokenHandler(T_IMPLEMENTS,$this);}}public function execute(Token$L,TokenVM$R){if(Configuration::get('deletewhitespaces',false)){switch($L->T){case T_WHITESPACE:$g=$R->getTokenArray();if(($i15=current($g))&&$i15->T==T_END_HEREDOC)$this->insertForcedWhitespace($R,true);return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;case T_ECHO:case T_RETURN:case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:case T_STATIC:case T_FINAL:case T_CASE:case T_CONTINUE:case T_BREAK:case T_THROW:$g=$R->getTokenArray();if($i15=current($g)){if($i15->T!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i15=next($g))&&$i15->T!=T_CONSTANT_ENCAPSED_STRING&&$i15->T!=T_VARIABLE)$this->insertForcedWhitespace($R);}break;case T_VARIABLE:$g=$R->getTokenArray();if($i15=current($g)){if($i15->T!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i15=next($g))&&($i15->T==T_AS||$i15->T==T_INSTANCEOF))$this->insertForcedWhitespace($R);}break;case T_GOTO:case T_NAMESPACE:case T_CONST:case T_NEW:case T_INSTANCEOF:case T_INSTEADOF:case T_CLASS:case T_EXTENDS:case T_FUNCTION:case T_START_HEREDOC:case T_USE:case T_INTERFACE:case T_TRAIT:case T_IMPLEMENTS:$this->insertForcedWhitespace($R);break;case T_ELSE:$g=$R->getTokenArray();if($i15=current($g)){if($i15->T!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i15=next($g))&&$i15->T!=T_CURLY_OPEN)$this->insertForcedWhitespace($R);}break;case T_STRING:$g=$R->getTokenArray();if($i15=current($g)){if($i15->T!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i15=next($g))&&($i15->T==T_EXTENDS||$i15->T==T_INSTEADOF||$i15->T==T_INSTANCEOF||$i15->T==T_AS||$i15->T==T_IMPLEMENTS))$this->insertForcedWhitespace($R);}break;case T_SEMICOLON:$g=$R->getTokenArray();prev($g);$i15=prev($g);if($i15->T==T_END_HEREDOC)$this->insertForcedWhitespace($R,true);break;case T_END_HEREDOC:$g=$R->getTokenArray();if(($i15=current($g))&&$i15->T!=T_SEMICOLON)$this->insertForcedWhitespace($R,true);break;}}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}private function insertForcedWhitespace(TokenVM$R,$i21=false){$L=new Token;$L->content=$i21?"\r\n":" ";$L->T=T_FORCED_WHITESPACE;$L->V="Moody WhitespaceHandler";$R->insertTokenArray(array($L));}}}namespace Moody\InstructionHandlers{use Moody\Configuration;use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ConfigurationHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('config',$this);InstructionProcessor::getInstance()->registerHandler('configuration',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i4=$Q->parseArguments($L,$P,'s?x');if(!isset($i4[1])){$L->content=Token::makeEvaluatable(Configuration::get($i4[0],null));return 0;}else Configuration::set($i4[0],$i4[1]);return TokenVM::DELETE_TOKEN;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GetConstantHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('const',$this);InstructionProcessor::getInstance()->registerHandler('constant',$this);InstructionProcessor::getInstance()->registerHandler('getconstant',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i4=$Q->parseArguments($L,$P,'s');if(!ConstantContainer::isDefined($i4[0]))throw new InstructionProcessorException($P.': Undefined constant: '.$i4[0],$L);$i22=ConstantContainer::getConstant($i4[0]);$L->content=Token::makeEvaluatable($i22);return 0;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\ConstantContainer;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class DefineHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('define',$this);InstructionProcessor::getInstance()->registerHandler('def',$this);InstructionProcessor::getInstance()->registerHandler('d',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'sx');ConstantContainer::define($i4[0],$i4[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EchoHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('echo',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');echo$i4[0];return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseHandler implements InstructionHandlerWithRegister{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('else',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){foreach(IfInstruction::getAll()as$x){if($x->getToken()==$L){if(!($x->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i23=$x;}}foreach(IfInstruction::getAll()as$x){if($x->getEndToken()==$L){if($x->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i23->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$R->jump($i23->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return TokenVM::DELETE_TOKEN;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseIfHandler implements InstructionHandlerWithRegister{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('elseif',$this);InstructionProcessor::getInstance()->registerHandler('elif',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){foreach(IfInstruction::getAll()as$x){if($x->getToken()==$L){if(!($x->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i23=$x;}}foreach(IfInstruction::getAll()as$x){if($x->getEndToken()==$L){if($x->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i23->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$R->jump($i23->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return IfHandler::getInstance()->execute($L,$P,$Q,$R);}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\TokenHandlers\InstructionProcessor;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenVM;use Moody\IfInstruction;class EndIfHandler implements InstructionHandlerWithRegister{private static$u;private function __construct(){InstructionProcessor::getInstance()->registerHandler('endif',$this);}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::DELETE_TOKEN;}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EvalHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('eval',$this);InstructionProcessor::getInstance()->registerHandler('evaluate',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i4=$Q->parseArguments($L,$P,'s?bb');if(!isset($i4[1])||$i4[1]===true){if(!strpos($i4[0],'<?')){$i24=true;$g=Token::tokenize('<?php '.$i4[0].' ?>');}else $g=Token::tokenize($i4[0]);$R=new TokenVM();try{$g=$R->execute($g);}catch(\Exception$i25){echo (string)$i25."\r\n";exit;}if(isset($i24)){reset($g);unset($g[key($g)]);end($g);unset($g[key($g)]);}$i4[0]="";foreach($g as$i26){$i4[0].=$i26->content;}}$i27=eval($i4[0]);if($i27!==null){$L->content=!isset($i4[2])||$i4[2]===true?Token::makeEvaluatable($i27):$i27;return 0;}return TokenVM::DELETE_TOKEN;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){return$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ExitHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('exit',$this);InstructionProcessor::getInstance()->registerHandler('halt',$this);InstructionProcessor::getInstance()->registerHandler('quit',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::QUIT|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GotoHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('goto',$this);InstructionProcessor::getInstance()->registerHandler('jump',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');$i28=LabelHandler::getLabel($i4[0]);if(!($i28 instanceof Token))throw new InstructionProcessorException('Jump to undefined label '.$i4[0],$L);$R->jump($i28);return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_ELSE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfHandler implements InstructionHandlerWithRegister{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('if',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'x');foreach(IfInstruction::getAll()as$x){if($x->getToken()==$L){if(!($x->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i29="";$i27=false;foreach($i4 as$i30){if(is_string($i30)&&strtolower($i30)!=="true"&&strtolower($i30)!=="false"){$X=Token::tokenize('<?php '.$i30.' ?>');if($X[1]->T==T_STRING)$i30=Token::makeEvaluatable($i30);}if($i30===true)$i30="true";if($i30===false)$i30="false";$i29.=$i30;}$i27=eval('return (int) (bool) ('.$i29.');');if($i27===1){$x->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);return TokenVM::DELETE_TOKEN;}if($i27===false)throw new InstructionProcessorException('If-condition '.$i29.' is invalid',$L);$R->jump($x->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfDefHandler implements InstructionHandlerWithRegister{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifdef',$this);InstructionProcessor::getInstance()->registerHandler('ifdefined',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');foreach(IfInstruction::getAll()as$x){if($x->getToken()==$L){if(!($x->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);if(ConstantContainer::isDefined($i4[0]))return TokenVM::DELETE_TOKEN;$R->jump($x->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfNotDefHandler implements InstructionHandlerWithRegister{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifndef',$this);InstructionProcessor::getInstance()->registerHandler('ifnotdefined',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');foreach(IfInstruction::getAll()as$x){if($x->getToken()==$L){if(!($x->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);if(!ConstantContainer::isDefined($i4[0]))return TokenVM::DELETE_TOKEN;$R->jump($x->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IncludeHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('include',$this);InstructionProcessor::getInstance()->registerHandler('inc',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');if(!file_exists($i4[0]))throw new InstructionProcessorException($i4[0].' does not exist',$L);if(!is_readable($i4[0]))throw new InstructionProcessorException($i4[0].' is not readable - Make sure Moody has the rights to read it',$L);$a=file_get_contents($i4[0]);$X=Token::tokenize($a,$i4[0]);switch($X[0]->T){case T_OPEN_TAG:unset($X[0]);break;case T_INLINE_HTML:$L=new Token;$L->T=T_CLOSE_TAG;$L->content=" ?>";$i31=array($L);foreach($X as$L)$i31[]=$L;$X=$i31;}end($X);switch(current($X)->T){case T_CLOSE_TAG:unset($X[key($X)]);break;case T_INLINE_HTML:$L=new Token;$L->T=T_OPEN_TAG;$L->content="<?php ";$X[]=$L;}$R->insertTokenArray($X);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IsDefinedHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('isdefined',$this);InstructionProcessor::getInstance()->registerHandler('isdef',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i4=$Q->parseArguments($L,$P,'s');if(ConstantContainer::isDefined($i4[0]))$L->content=Token::makeEvaluatable(true);else $L->content=Token::makeEvaluatable(false);return 0;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class LabelHandler implements InstructionHandlerWithRegister{private static$u=null;private static$i32=array();private function __construct(){InstructionProcessor::getInstance()->registerHandler('label',$this);InstructionProcessor::getInstance()->registerHandler('jumplabel',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::DELETE_TOKEN;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');if(isset(self::$i32[$i4[0]]))throw new InstructionProcessorException('Double definition of jump label "'.$i4[0].'" (first definition at '.self::$i32[$i4[0]]->V.':'.self::$i32[$i4[0]]->W,$L);self::$i32[$i4[0]]=$L;}public static function getLabel($I){if(isset(self::$i32[$I]))return self::$i32[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class MacroHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('macro',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){if(strtolower($P)=='.macro'){$i4=$Q->parseArguments($L,$P,'ss');if(!strlen($i4[0]))throw new InstructionProcessorException('Macro name cannot be empty',$L);$i33=new Macro(strtolower($i4[0]),$i4[1]);$Q->registerHandler(strtolower($i4[0]),$this);unset($i4[0],$i4[1]);foreach($i4 as$i30)$i33->addArgument($i30);return TokenVM::DELETE_TOKEN;}$i34=substr(strtolower($P),1);$i33=Macro::getMacro($i34);if(!$i33)throw new InstructionProcessorException('Call to bad macro',$L);$i0="";for($i35=0;$i35<$i33->numArgs();$i35++)$i0.='x';$i4=$Q->parseArguments($L,$P,$i0);$R->insertTokenArray($i33->buildCode($i4));return TokenVM::DELETE_TOKEN;}}class Macro{private$I="";private$code="";private$i36=array();private static$i37=array();public function __construct($I,$code){$this->I=$I;$this->code=$code;self::$i37[$I]=$this;}public function addArgument($i38){$this->i36[]=$i38;}public function numArgs(){return count($this->i36);}public function buildCode($i4=array()){$i35=0;$code=$this->code;foreach($this->i36 as$i30){$code=str_replace($i30,$i4[$i35],$code);$i35++;}$X=Token::tokenize('<?php '.$code,'Macro '.$this->I);unset($X[0]);return$X;}public static function getMacro($I){if(isset(self::$i37[$I]))return self::$i37[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenHandlers\VariableHandler;use Moody\TokenVM;class MapVariableHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('mapvariable',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'ss');if(!class_exists('Moody\TokenHandlers\VariableHandler'))throw new InstructionProcessorException('Variable mapping is not available as the token handler for T_VARIABLE is not currently loaded',$L);VariableHandler::getInstance()->mapVariable($i4[0],$i4[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class RaiseErrorHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('raiseerror',$this);InstructionProcessor::getInstance()->registerHandler('error',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i4=$Q->parseArguments($L,$P,'s');throw new InstructionProcessorException($i4[0],$L);}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class UndefineHandler implements InstructionHandler{private static$u=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('undef',$this);InstructionProcessor::getInstance()->registerHandler('undefine',$this);}public static function getInstance(){if(!self::$u)self::$u=new self;return self::$u;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i4=$Q->parseArguments($L,$P,'s');if(!ConstantContainer::isDefined($i4[0]))throw new InstructionProcessorException($P.': Undefined constant: '.$i4[0],$L);ConstantContainer::undefine($i4[0]);return TokenVM::DELETE_TOKEN;}}}?>