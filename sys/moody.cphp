<?php namespace Moody{class Configuration{private static$A=array();public static function load($B){}public static function set($C,$D){return self::$A[$C]=$D;}public static function get($C,$E=null){if(isset(self::$A[$C]))return self::$A[$C];return$E;}}}namespace Moody{class ConstantContainer{private static$F=array();public static function initialize(){foreach(get_defined_constants()as$G=>$H)if(!self::isDefined($G))self::define($G,$H);}public static function getConstant($I){$I=strtolower($I);if(isset(self::$F[$I]))return self::$F[$I];}public static function isDefined($I){return isset(self::$F[strtolower($I)]);}public static function define($I,$D){self::$F[strtolower($I)]=$D;}public static function undefine($I){$I=strtolower($I);if(isset(self::$F[$I]))unset(self::$F[$I]);}}}namespace Moody{const END_TOKEN_NO_EXECUTE=1;const END_TOKEN_EXECUTE=2;class IfInstruction{private static$J=array();private static$K=array();private$L;private$M;private$N=END_TOKEN_EXECUTE;public function __construct(Token$L){self::$J[]=$this;self::$K[]=$this;$this->L=$L;}public static function setEndToken(Token$L){if(!self::$K)throw new InstructionProcessorException('Endif or Else while no if is active',$L);end(self::$K);self::$K[key(self::$K)]->M=$L;unset(self::$K[key(self::$K)]);}public function getToken(){return$this->L;}public function getEndToken(){return$this->M;}public function setEndTokenAction($O){$this->N=$O;}public function getEndTokenAction(){return$this->N;}public static function getAll(){return self::$J;}}}namespace Moody{interface InstructionHandler{public static function getInstance();public function execute(Token$L,$P,TokenHandlers\InstructionProcessor$Q,TokenVM$R);}interface InstructionHandlerWithRegister extends InstructionHandler{public function register(Token$L,$P,TokenHandlers\InstructionProcessor$Q,TokenVM$R);}}namespace Moody{class InstructionProcessorException extends \Exception{private$L;public function __construct($S,Token$L){$this->S=$S;$this->L=$L;}public function __toString(){$B='The Moody Instruction Processor encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->S."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString()."\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;return$B;}}}namespace Moody{class MoodyException extends \Exception{public function __toString(){$B='Moody encountered an unexpected error and can not continue.'."\r\n";$B.='Exception message: '.$this->S."\r\n";$B.='System backtrace: '."\r\n".$this->getTraceAsString();return$B;}}}namespace Moody{define('T_DOT',16384);define('T_UNKNOWN',16385);define('T_ROUND_BRACKET_OPEN',16386);define('T_ROUND_BRACKET_CLOSE',16387);define('T_COMMA',16388);define('T_TRUE',16389);define('T_FALSE',16390);define('T_NULL',16391);define('T_FORCED_WHITESPACE',16392);define('T_SEMICOLON',16393);if(!defined('T_INSTEADOF'))define('T_INSTEADOF',32768);if(!defined('T_TRAIT'))define('T_TRAIT',32769);class Token{public$T=0;public$U=0;public$V=0;public$W="Unknown";public$X=0;public$content="";private static$Y=0;private static$Z=0;private static$a=array(T_ABSTRACT=>"T_ABSTRACT",T_AND_EQUAL=>"T_AND_EQUAL",T_ARRAY=>"T_ARRAY",T_ARRAY_CAST=>"T_ARRAY_CAST",T_AS=>"T_AS",T_BAD_CHARACTER=>"T_BAD_CHARACTER",T_BOOLEAN_AND=>"T_BOOLEAN_AND",T_BOOLEAN_OR=>"T_BOOLEAN_OR",T_BOOL_CAST=>"T_BOOL_CAST",T_BREAK=>"T_BREAK",T_CASE=>"T_CASE",T_CATCH=>"T_CATCH",T_CHARACTER=>"T_CHARACTER",T_CLASS=>"T_CLASS",T_CLASS_C=>"T_CLASS_C",T_CLONE=>"T_CLONE",T_CLOSE_TAG=>"T_CLOSE_TAG",T_COMMA=>"T_COMMA",T_COMMENT=>"T_COMMENT",T_CONCAT_EQUAL=>"T_CONCAT_EQUAL",T_CONST=>"T_CONST",T_CONSTANT_ENCAPSED_STRING=>"T_CONSTANT_ENCAPSED_STRING",T_CONTINUE=>"T_CONTINUE",T_CURLY_OPEN=>"T_CURLY_OPEN",T_DEC=>"T_DEC",T_DECLARE=>"T_DECLARE",T_DEFAULT=>"T_DEFAULT",T_DIR=>"T_DIR",T_DIV_EQUAL=>"T_DIV_EQUAL",T_DNUMBER=>"T_DNUMBER",T_DO=>"T_DO",T_DOC_COMMENT=>"T_DOC_COMMENT",T_DOLLAR_OPEN_CURLY_BRACES=>"T_DOLLAR_OPEN_CURLY_BRACES",T_DOT=>"T_DOT",T_DOUBLE_ARROW=>"T_DOUBLE_ARROW",T_DOUBLE_CAST=>"T_DOUBLE_CAST",T_DOUBLE_COLON=>"T_DOUBLE_COLON",T_ECHO=>"T_ECHO",T_ELSE=>"T_ELSE",T_ELSEIF=>"T_ELSEIF",T_EMPTY=>"T_EMPTY",T_ENCAPSED_AND_WHITESPACE=>"T_ENCAPSED_AND_WHITESPACE",T_ENDDECLARE=>"T_ENDDECLARE",T_ENDFOR=>"T_ENDFOR",T_ENDFOREACH=>"T_ENDFOREACH",T_ENDIF=>"T_ENDIF",T_ENDSWITCH=>"T_ENDSWITCH",T_ENDWHILE=>"T_ENDWHILE",T_END_HEREDOC=>"T_END_HEREDOC",T_EVAL=>"T_EVAL",T_EXIT=>"T_EXIT",T_EXTENDS=>"T_EXTENDS",T_FALSE=>"T_FALSE",T_FILE=>"T_FILE",T_FINAL=>"T_FINAL",T_FOR=>"T_FOR",T_FORCED_WHITESPACE=>"T_FORCED_WHITESPACE",T_FOREACH=>"T_FOREACH",T_FUNCTION=>"T_FUNCTION",T_FUNC_C=>"T_FUNC_C",T_GLOBAL=>"T_GLOBAL",T_GOTO=>"T_GOTO",T_HALT_COMPILER=>"T_HALT_COMPILER",T_OPEN_TAG=>"T_OPEN_TAG",T_ROUND_BRACKET_CLOSE=>"T_ROUND_BRACKET_CLOSE",T_ROUND_BRACKET_OPEN=>"T_ROUND_BRACKET_OPEN",T_SEMICOLON=>"T_SEMICOLON",T_STRING=>"T_STRING",T_TRUE=>"T_TRUE",T_UNKNOWN=>"T_UNKNOWN",T_VARIABLE=>"T_VARIABLE",T_WHITESPACE=>"T_WHITESPACE");public function __construct(){$this->T=self::$Y++;}public static function tokenize($b,$c=null){$Y=token_get_all($b);if(!$Y)throw new MoodyException('Token::tokenize() was called with a non-tokenizable code');$d=array();self::$Z++;foreach($Y as$L){$e=new Token;$e->V=self::$Z;if($c)$e->W=$c;if(is_array($L)){$e->U=$L[0];$e->content=$L[1];$e->X=$L[2];if(strtolower($e->content)=='true')$e->U=T_TRUE;else if(strtolower($e->content)=='false')$e->U=T_FALSE;else if(strtolower($e->content)=='null')$e->U=T_NULL;}else {$e->content=$L;$e->X=-1;switch($L){case'.':$e->U=T_DOT;break;case'(':$e->U=T_ROUND_BRACKET_OPEN;break;case')':$e->U=T_ROUND_BRACKET_CLOSE;break;case',':$e->U=T_COMMA;break;case';':$e->U=T_SEMICOLON;break;default:$e->U=T_UNKNOWN;}}$d[]=$e;}return$d;}public function __toString(){$B='Type: '.(isset(self::$a[$this->U])?self::$a[$this->U]:$this->U)."\r\n";$B.='Content: '.$this->content."\r\n";if($this->W!="Unknown"){$B.='Origin: '.$this->W."\r\n";$B.='Line: '.$this->X."\r\n";}return$B;}public static function makeEvaluatable($D){if(is_string($D))return"'".str_replace("'","\'",$D)."'";if(is_int($D)||is_float($D))return$D;if($D===true)return"true";if($D===false)return"false";if($D===null)return"null";}}}namespace Moody{interface TokenHandler{public static function getInstance();public function execute(Token$L,TokenVM$R);}interface TokenHandlerWithRegister extends TokenHandler{public function register(Token$L,TokenVM$R);}}namespace Moody{class TokenVM{const NEXT_TOKEN=1;const QUIT=2;const NEXT_HANDLER=4;const ERROR=8;const REEXECUTE_TOKEN=16;const REEXECUTE_HANDLER=32;const JUMP=64;const CLEAR_RETVAL=128;const CLEAR_ERROR=256;const DELETE_TOKEN=512;private static$f=array();private$g=array();private$h=array();private$i=array();private$j=null;public function __construct(){$this->g=self::$f;}public function execute($i){if(!$i)throw new VMException('Virtual machine received empty token array');$this->i=$i;$k=0;foreach($this->i as$L){if(isset($this->g[$L->U])){foreach($this->g[$L->U]as$l){if(!is_object($l))throw new VMException('Handler for token is not a object',$L);$m=clone$L;if(is_callable(array($l,'register')))$l->register($L,$this);$L=$m;}reset($this->g[$L->U]);}}reset($this->i);$n=array();nextToken:if(!($L=current($this->i)))goto quit;$o=$L->T;next($this->i);$p=clone$L;executeToken:if(!is_int($o))throw new VMException('Token ID '.$o.' is not an integer');if(!($L instanceof Token))throw new VMException('Element '.$o.' is not a valid token');$this->h[$o]=true;$k=0;nextHandler:if(isset($this->g[$L->U])){if(current($this->g[$L->U])!==false){$l=current($this->g[$L->U]);next($this->g[$L->U]);}else {reset($this->g[$L->U]);goto doRetval;}}else {$n[]=$L;goto nextToken;}executeHandler:if(!is_object($l))throw new VMException('Handler for token is not a object',$L);if(!is_callable(array($l,'execute')))throw new VMException('The execute method of the token handler does not exist or is not callable from the virtual machines\' scope',$L);$q=$l->execute($L,$this);if($q&self::CLEAR_RETVAL)$k=$q;else $k|=$q;doRetval:if($k&self::REEXECUTE_HANDLER){$k^=self::REEXECUTE_HANDLER;goto executeHandler;}if($k&self::NEXT_HANDLER){$k^=self::NEXT_HANDLER;goto nextHandler;}if($k&self::REEXECUTE_TOKEN){$k^=self::REEXECUTE_TOKEN;goto executeToken;}if(!($k&self::DELETE_TOKEN))$n[]=$L;if($k&self::QUIT)goto quit;if($k&self::ERROR&&!($k&self::CLEAR_ERROR))throw new VMException('Token handler returned an error',$L,$p);if($k&self::JUMP){if(!($this->j instanceof Token))throw new VMException('Cannot jump to new token as it is not a token',$L,$p);if(!in_array($this->j,$this->i))throw new VMException('Cannot jump to new token as it is not specified in current token array',$L,$p);if(array_search($this->j,$this->i)<key($this->i)){while(current($this->i)!=$this->j)prev($this->i);}else if(array_search($this->j,$this->i)>key($this->i)){while(current($this->i)!=$this->j)next($this->i);}}if($k&self::NEXT_TOKEN)goto nextToken;throw new VMException('Token handler did not specify an action for the virtual machine',$L,$p);quit:return$n;}public function hasExecuted($o){return isset($this->$h[$o]);}public static function globalRegisterTokenHandler($r,TokenHandler$s){if(!isset(self::$f[$r]))self::$f[$r]=array($s);else self::$f[$r][]=$s;}public static function globalUnregisterTokenHandler($r,TokenHandler$s){if(!isset(self::$f[$r])||($t=array_search(self::$g[$r]))===false)return;unset(self::$f[$r][$t]);}public function registerTokenHandler($r,TokenHandler$s){if(!isset($this->g[$r]))$this->g[$r]=array($s);else $this->g[$r][]=$s;}public function unregisterTokenHandler($r,TokenHandler$s){if(!isset($this->g[$r])||($t=array_search($this->g[$r]))===false)return;unset($this->g[$r][$t]);}public function jump(Token$L){$this->j=$L;}public function insertTokenArray($i){reset($i);$u=current($i);while($L=current($this->i)){$v[]=$L;unset($this->i[key($this->i)]);}foreach($i as$L){if(isset($this->g[$L->U])){$t=key($this->g[$L->U]);foreach($this->g[$L->U]as$l){if(!is_object($l))throw new VMException('Handler for token is not a object',$L);$m=clone$L;if(is_callable(array($l,'register')))$l->register($L,$this);$L=$m;}reset($this->g[$L->U]);while(key($this->g[$L->U])!==$t)next($this->g[$L->U]);}$this->i[]=$L;}foreach($v as$L)$this->i[]=$L;$t=array_search($u,$this->i);while(key($this->i)!=$t)prev($this->i);}public function getTokenArray(){return$this->i;}}}namespace Moody{class VMException extends \Exception{private$L;private$p;public function __construct($S,Token$L=null,Token$p=null){$this->S=$S;$this->L=$L;$this->p=$p;}public function __toString(){$B='The Moody Virtual Machine encountered an unexpected error and can not continue'."\r\n";$B.='Exception message: '.$this->S."\r\n";$B.='System backtrace:'."\r\n";$B.=$this->getTraceAsString();if($this->L instanceof Token){$B.="\r\n";$B.='Current token:'."\r\n";$B.=(string)$this->L;}if($this->p instanceof Token){$B.="\r\n";$B.='Current token before modification through token handlers:'."\r\n";$B.=(string)$this->p;}return$B;}}}namespace Moody\TokenHandlers{use Moody\TokenHandlerWithRegister;use Moody\TokenVM;use Moody\Token;use Moody\InstructionProcessorException;use Moody\Configuration;use Moody\ConstantContainer;use Moody\InstructionHandler;class InstructionProcessor implements TokenHandlerWithRegister{private static$w=null;private$g=array();public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_COMMENT,$this);}public function execute(Token$L,TokenVM$R){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$x=array();$y=0;if(preg_match('~^\s*(\.([A-Za-z]+))~',$content,$x)){$z=strtolower($x[2]);if(isset($this->g[$z])){if(!is_callable(array($this->g[$z],'execute')))throw new InstructionProcessorException('Handler for instruction "'.$x[1].'" does not exist or is not callable',$L);$y=$this->g[$z]->execute($L,$x[1],$this,$R);}else if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$x[1].'"',$L);}else if(Configuration::get('deletecomments',false))$y=TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|$y;}public function register(Token$L,TokenVM$R){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$x=array();if(preg_match('~^\s*(\.([A-Za-z]+))~',$content,$x)){$z=strtolower($x[2]);if(isset($this->g[$z])){if(is_callable(array($this->g[$z],'register')))$this->g[$z]->register($L,$x[1],$this,$R);}}}private function inlineExecute(Token$L){$content=str_replace(array("//","/*","*/","#"),"",$L->content);$x=array();if(preg_match('~^\s*(\.([A-Za-z]+))~',$content,$x)){$z=strtolower($x[2]);if(isset($this->g[$z])){if(!is_callable(array($this->g[$z],'inlineExecute')))throw new InstructionProcessorException('Handler for instruction "'.$x[1].'" does not support inline execution or is not callable',$L);$this->g[$z]->inlineExecute($L,$x[1],$this);}else if(!Configuration::get('ignoreunknowninstruction',false))throw new InstructionProcessorException('Unknown instruction "'.$x[1].'"',$L);}}public function registerHandler($z,InstructionHandler$s){$this->g[$z]=$s;}public function parseArguments(Token$i0,$P,$i1){if($i1)$i2=str_split($i1);else $i2=array();if(!strpos($i0->content,$P))throw new InstructionProcessorException('Token corrupted',$i0);if(substr($i0->content,0,2)=='/*')$content=substr($i0->content,2,strrpos($i0->content,'*/')-2);else if(substr($i0->content,0,1)=='#')$content=substr($i0->content,1);else $content=substr($i0->content,2);$i3=substr($content,strpos($content,$P)+strlen($P));$Y=Token::tokenize('<?php '.$i3.' ?>');$i4=0;$i5=0;$i6=$i7=array();foreach($Y as$L){if($L->U==T_OPEN_TAG||$L->U==T_CLOSE_TAG||$L->U==T_ROUND_BRACKET_OPEN||$L->U==T_ROUND_BRACKET_CLOSE||$L->U==T_COMMA||$L->U==T_WHITESPACE||in_array($L,$i7))continue;switch($L->U){case T_STRING:if(ConstantContainer::isDefined($L->content))$i8=ConstantContainer::getConstant($L->content);else $i8=$L->content;break;case T_CONSTANT_ENCAPSED_STRING:$i8=eval('return '.$L->content.';');break;case T_TRUE:$i8=true;break;case T_FALSE:$i8=false;break;case T_LNUMBER:$i8=(int)$L->content;break;case T_DNUMBER:$i8=(float)$L->content;break;case T_NULL:$i8=null;break;case T_NS_SEPARATOR:$i9="";$i10=key($Y)-1;prev($Y);while($i11=prev($Y)){if($i11->U!=T_STRING)break;unset($i6[key($i6)]);$i9=$i11->content.$i9;}while(key($Y)!=$i10)next($Y);$i9.=$L->content;while($i12=next($Y)){if($i12->U!=T_NS_SEPARATOR&&$i12->U!=T_STRING)break;$i9.=$i12->content;$i7[]=$i12;}if(ConstantContainer::isDefined($i9))$i8=ConstantContainer::getConstant($i9);else $i8=$i9;break;case T_COMMENT:$this->inlineExecute($L);default:$i8=$L->content;}parseArg:if(!isset($i2[$i4+$i5])||!$i2[$i4+$i5]){$i6[]=$i8;}else if($i2[$i4+$i5]=='?'){$i5++;goto parseArg;}else {switch(strtolower($i2[$i4+$i5])){default:throw new InstructionProcessorException('Illegal option for argument parser given: '.$i2[$i4+$i5],$i0);case'n':if(is_numeric($i8)&&is_string($i8))$i6[]=(float)$i8;else if(is_int($i8)||is_float($i8)||$i8===null)$i6[]=$i8;else throw new InstructionProcessorException('Illegal argument '.($i4+1).' for '.$P.': '.$L->content.' given, number expected',$i0);break;case's':if((is_string($i8)&&($L->U==T_STRING||$L->U==T_CONSTANT_ENCAPSED_STRING))||$i8===null)$i6[]=$i8;else throw new InstructionProcessorException('Illegal argument '.($i4+1).' for '.$P.': '.$L->content.' given, string expected',$i0);break;case'b':if(is_bool($i8)||$i8===null)$i6[]=$i8;else throw new InstructionProcessorException('Illegal argument '.($i4+1).' for '.$P.': '.$L->content.' given, bool expected',$i0);break;case'x':$i6[]=$i8;}}$i4++;}if((strpos($i1,'?')!==false&&$i4<strpos($i1,'?'))||($i4<count($i2)&&strpos($i1,'?')===false))throw new InstructionProcessorException($P.' expects '.count($i2).' arguments, '.$i4.' given',$i0);return$i6;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class DocCommentHandler implements TokenHandler{private static$w=null;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_DOC_COMMENT,$this);}public function execute(Token$L,TokenVM$R){if(Configuration::get('deletecomments',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\Token;use Moody\TokenVM;use Moody\TokenHandler;class OpenTagHandler implements TokenHandler{private static$w=null;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_OPEN_TAG,$this);}public function execute(Token$L,TokenVM$R){if($L->content=='<?'||$L->content=='<%')$L->content='<?php ';return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Token;use Moody\Configuration;class VariableHandler implements TokenHandler{private static$w=null;private$i13=array();private$i14="A";public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_OBJECT_OPERATOR,$this);}public function execute(Token$L,TokenVM$R){static$i15=array('$this','$_GET','$_POST','$_REQUEST','$_COOKIE','$_ENV','$_SESSION','$_SERVER','$_FILES');if(Configuration::get('compressvariables',false)&&!in_array($L->content,$i15)){if($L->U==T_OBJECT_OPERATOR){if(!Configuration::get('compressproperties',false))return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;$i=$R->getTokenArray();$i16=current($i);if($i16->U!=T_STRING)goto end;while($i17=next($i)){if($i17->U==T_WHITESPACE)continue;if($i17->U==T_ROUND_BRACKET_OPEN)goto end;break;}$i18=$i16;$i18->content='$'.$i18->content;}else $i18=$L;if(!isset($this->i13[$i18->content])){if(!Configuration::get('compressproperties',false)){$i=$R->getTokenArray();prev($i);while($i17=prev($i)){switch($i17->U){case T_STATIC:$i19=true;goto map;default:if(!isset($i19)&&isset($i20))goto end;goto map;case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:$i20=true;case T_WHITESPACE:case T_FORCED_WHITESPACE:continue 2;}}}map:do{$this->mapVariable($i18->content,is_int($this->i14)?'$i'.$this->i14:'$'.$this->i14);if($this->i14==="Z")$this->i14="a";else if($this->i14==="z")$this->i14=0;else if(is_int($this->i14))$this->i14++;else $this->i14=chr(ord($this->i14)+1);}while(count(array_keys($this->i13,$this->i13[$i18->content]))>1);}$i18->content=isset($i16)?substr($this->i13[$i18->content],1):$this->i13[$i18->content];}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}public function mapVariable($i21,$i22){return$this->i13[$i21]=$i22;}}}namespace Moody\TokenHandlers{use Moody\TokenHandler;use Moody\TokenVM;use Moody\Configuration;use Moody\Token;class WhitespaceHandler implements TokenHandler{private static$w=null;public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}private function __construct(){TokenVM::globalRegisterTokenHandler(T_WHITESPACE,$this);TokenVM::globalRegisterTokenHandler(T_ECHO,$this);TokenVM::globalRegisterTokenHandler(T_VARIABLE,$this);TokenVM::globalRegisterTokenHandler(T_GOTO,$this);TokenVM::globalRegisterTokenHandler(T_ELSE,$this);TokenVM::globalRegisterTokenHandler(T_NAMESPACE,$this);TokenVM::globalRegisterTokenHandler(T_CONST,$this);TokenVM::globalRegisterTokenHandler(T_NEW,$this);TokenVM::globalRegisterTokenHandler(T_INSTANCEOF,$this);TokenVM::globalRegisterTokenHandler(T_INSTEADOF,$this);TokenVM::globalRegisterTokenHandler(T_STRING,$this);TokenVM::globalRegisterTokenHandler(T_CLASS,$this);TokenVM::globalRegisterTokenHandler(T_EXTENDS,$this);TokenVM::globalRegisterTokenHandler(T_PUBLIC,$this);TokenVM::globalRegisterTokenHandler(T_PROTECTED,$this);TokenVM::globalRegisterTokenHandler(T_PRIVATE,$this);TokenVM::globalRegisterTokenHandler(T_FINAL,$this);TokenVM::globalRegisterTokenHandler(T_STATIC,$this);TokenVM::globalRegisterTokenHandler(T_FUNCTION,$this);TokenVM::globalRegisterTokenHandler(T_RETURN,$this);TokenVM::globalRegisterTokenHandler(T_CASE,$this);TokenVM::globalRegisterTokenHandler(T_START_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_SEMICOLON,$this);TokenVM::globalRegisterTokenHandler(T_END_HEREDOC,$this);TokenVM::globalRegisterTokenHandler(T_BREAK,$this);TokenVM::globalRegisterTokenHandler(T_CONTINUE,$this);TokenVM::globalRegisterTokenHandler(T_USE,$this);TokenVM::globalRegisterTokenHandler(T_THROW,$this);TokenVM::globalRegisterTokenHandler(T_INTERFACE,$this);TokenVM::globalRegisterTokenHandler(T_TRAIT,$this);TokenVM::globalRegisterTokenHandler(T_IMPLEMENTS,$this);}public function execute(Token$L,TokenVM$R){if(Configuration::get('deletewhitespaces',false)){switch($L->U){case T_WHITESPACE:$i=$R->getTokenArray();if(($i17=current($i))&&$i17->U==T_END_HEREDOC)$this->insertForcedWhitespace($R,true);return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN|TokenVM::DELETE_TOKEN;case T_ECHO:case T_RETURN:case T_PUBLIC:case T_PROTECTED:case T_PRIVATE:case T_STATIC:case T_FINAL:case T_CASE:case T_CONTINUE:case T_BREAK:case T_THROW:$i=$R->getTokenArray();if($i17=current($i)){if($i17->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i17=next($i))&&$i17->U!=T_CONSTANT_ENCAPSED_STRING&&$i17->U!=T_VARIABLE)$this->insertForcedWhitespace($R);}break;case T_VARIABLE:$i=$R->getTokenArray();if($i17=current($i)){if($i17->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i17=next($i))&&($i17->U==T_AS||$i17->U==T_INSTANCEOF))$this->insertForcedWhitespace($R);}break;case T_GOTO:case T_NAMESPACE:case T_CONST:case T_NEW:case T_INSTANCEOF:case T_INSTEADOF:case T_CLASS:case T_EXTENDS:case T_FUNCTION:case T_START_HEREDOC:case T_USE:case T_INTERFACE:case T_TRAIT:case T_IMPLEMENTS:$this->insertForcedWhitespace($R);break;case T_ELSE:$i=$R->getTokenArray();if($i17=current($i)){if($i17->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i17=next($i))&&$i17->U!=T_CURLY_OPEN)$this->insertForcedWhitespace($R);}break;case T_STRING:$i=$R->getTokenArray();if($i17=current($i)){if($i17->U!=T_WHITESPACE)return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;else if(($i17=next($i))&&($i17->U==T_EXTENDS||$i17->U==T_INSTEADOF||$i17->U==T_INSTANCEOF||$i17->U==T_AS||$i17->U==T_IMPLEMENTS))$this->insertForcedWhitespace($R);}break;case T_SEMICOLON:$i=$R->getTokenArray();prev($i);$i17=prev($i);if($i17->U==T_END_HEREDOC)$this->insertForcedWhitespace($R,true);break;case T_END_HEREDOC:$i=$R->getTokenArray();if(($i17=current($i))&&$i17->U!=T_SEMICOLON)$this->insertForcedWhitespace($R,true);break;}}end:return TokenVM::NEXT_HANDLER|TokenVM::NEXT_TOKEN;}private function insertForcedWhitespace(TokenVM$R,$i23=false){$L=new Token;$L->content=$i23?"\r\n":" ";$L->U=T_FORCED_WHITESPACE;$L->W="Moody WhitespaceHandler";$R->insertTokenArray(array($L));}}}namespace Moody\InstructionHandlers{use Moody\Configuration;use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ConfigurationHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('config',$this);InstructionProcessor::getInstance()->registerHandler('configuration',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i6=$Q->parseArguments($L,$P,'s?x');if(!isset($i6[1])){$L->content=Token::makeEvaluatable(Configuration::get($i6[0],null));return 0;}else Configuration::set($i6[0],$i6[1]);return TokenVM::DELETE_TOKEN;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GetConstantHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('const',$this);InstructionProcessor::getInstance()->registerHandler('constant',$this);InstructionProcessor::getInstance()->registerHandler('getconstant',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i6=$Q->parseArguments($L,$P,'s');if(!ConstantContainer::isDefined($i6[0]))throw new InstructionProcessorException($P.': Undefined constant: '.$i6[0],$L);$i24=ConstantContainer::getConstant($i6[0]);$L->content=Token::makeEvaluatable($i24);return 0;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\ConstantContainer;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class DefineHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('define',$this);InstructionProcessor::getInstance()->registerHandler('def',$this);InstructionProcessor::getInstance()->registerHandler('d',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'sx');ConstantContainer::define($i6[0],$i6[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EchoHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('echo',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');echo$i6[0];return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('else',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){foreach(IfInstruction::getAll()as$z){if($z->getToken()==$L){if(!($z->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i25=$z;}}foreach(IfInstruction::getAll()as$z){if($z->getEndToken()==$L){if($z->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i25->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$R->jump($i25->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return TokenVM::DELETE_TOKEN;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_NO_EXECUTE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ElseIfHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('elseif',$this);InstructionProcessor::getInstance()->registerHandler('elif',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){foreach(IfInstruction::getAll()as$z){if($z->getToken()==$L){if(!($z->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i25=$z;}}foreach(IfInstruction::getAll()as$z){if($z->getEndToken()==$L){if($z->getEndTokenAction()==\Moody\END_TOKEN_NO_EXECUTE){$i25->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);$R->jump($i25->getEndToken());return TokenVM::DELETE_TOKEN|TokenVM::JUMP;}}}return IfHandler::getInstance()->execute($L,$P,$Q,$R);}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\TokenHandlers\InstructionProcessor;use Moody\InstructionHandlerWithRegister;use Moody\Token;use Moody\TokenVM;use Moody\IfInstruction;class EndIfHandler implements InstructionHandlerWithRegister{private static$w;private function __construct(){InstructionProcessor::getInstance()->registerHandler('endif',$this);}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::DELETE_TOKEN;}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){IfInstruction::setEndToken($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class EvalHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('eval',$this);InstructionProcessor::getInstance()->registerHandler('evaluate',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i6=$Q->parseArguments($L,$P,'s?bb');if(!isset($i6[1])||$i6[1]===true){if(!strpos($i6[0],'<?')){$i26=true;$i=Token::tokenize('<?php '.$i6[0].' ?>');}else $i=Token::tokenize($i6[0]);$R=new TokenVM();try{$i=$R->execute($i);}catch(\Exception$i27){echo (string)$i27."\r\n";exit;}if(isset($i26)){reset($i);unset($i[key($i)]);end($i);unset($i[key($i)]);}$i6[0]="";foreach($i as$i28){$i6[0].=$i28->content;}}$i29=eval($i6[0]);if($i29!==null){$L->content=!isset($i6[2])||$i6[2]===true?Token::makeEvaluatable($i29):$i29;return 0;}return TokenVM::DELETE_TOKEN;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){return$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class ExitHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('exit',$this);InstructionProcessor::getInstance()->registerHandler('halt',$this);InstructionProcessor::getInstance()->registerHandler('quit',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::QUIT|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class GotoHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('goto',$this);InstructionProcessor::getInstance()->registerHandler('jump',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');$i30=LabelHandler::getLabel($i6[0]);if(!($i30 instanceof Token))throw new InstructionProcessorException('Jump to undefined label '.$i6[0],$L);$R->jump($i30);return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\END_TOKEN_ELSE;use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('if',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'x');foreach(IfInstruction::getAll()as$z){if($z->getToken()==$L){if(!($z->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);$i31="";$i29=false;foreach($i6 as$i32){if(is_string($i32)&&strtolower($i32)!=="true"&&strtolower($i32)!=="false"){$Y=Token::tokenize('<?php '.$i32.' ?>');if($Y[1]->U==T_STRING)$i32=Token::makeEvaluatable($i32);}if($i32===true)$i32="true";if($i32===false)$i32="false";$i31.=$i32;}$i29=eval('return (int) (bool) ('.$i31.');');if($i29===1){$z->setEndTokenAction(\Moody\END_TOKEN_NO_EXECUTE);return TokenVM::DELETE_TOKEN;}if($i29===false)throw new InstructionProcessorException('If-condition '.$i31.' is invalid',$L);$R->jump($z->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfDefHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifdef',$this);InstructionProcessor::getInstance()->registerHandler('ifdefined',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');foreach(IfInstruction::getAll()as$z){if($z->getToken()==$L){if(!($z->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);if(ConstantContainer::isDefined($i6[0]))return TokenVM::DELETE_TOKEN;$R->jump($z->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IfNotDefHandler implements InstructionHandlerWithRegister{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('ifndef',$this);InstructionProcessor::getInstance()->registerHandler('ifnotdefined',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');foreach(IfInstruction::getAll()as$z){if($z->getToken()==$L){if(!($z->getEndToken()instanceof Token))throw new InstructionProcessorException('Invalid end token for '.$P.' - Probably you forgot an endif?',$L);if(!ConstantContainer::isDefined($i6[0]))return TokenVM::DELETE_TOKEN;$R->jump($z->getEndToken());return TokenVM::JUMP|TokenVM::DELETE_TOKEN;}}}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){new IfInstruction($L);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IncludeHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('include',$this);InstructionProcessor::getInstance()->registerHandler('inc',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');if(!file_exists($i6[0]))throw new InstructionProcessorException($i6[0].' does not exist',$L);if(!is_readable($i6[0]))throw new InstructionProcessorException($i6[0].' is not readable - Make sure Moody has the rights to read it',$L);$c=file_get_contents($i6[0]);$Y=Token::tokenize($c,$i6[0]);switch($Y[0]->U){case T_OPEN_TAG:unset($Y[0]);break;case T_INLINE_HTML:$L=new Token;$L->U=T_CLOSE_TAG;$L->content=" ?>";$i33=array($L);foreach($Y as$L)$i33[]=$L;$Y=$i33;}end($Y);switch(current($Y)->U){case T_CLOSE_TAG:unset($Y[key($Y)]);break;case T_INLINE_HTML:$L=new Token;$L->U=T_OPEN_TAG;$L->content="<?php ";$Y[]=$L;}$R->insertTokenArray($Y);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class IsDefinedHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('isdefined',$this);InstructionProcessor::getInstance()->registerHandler('isdef',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i6=$Q->parseArguments($L,$P,'s');if(ConstantContainer::isDefined($i6[0]))$L->content=Token::makeEvaluatable(true);else $L->content=Token::makeEvaluatable(false);return 0;}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandlerWithRegister;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class LabelHandler implements InstructionHandlerWithRegister{private static$w=null;private static$i34=array();private function __construct(){InstructionProcessor::getInstance()->registerHandler('label',$this);InstructionProcessor::getInstance()->registerHandler('jumplabel',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){return TokenVM::DELETE_TOKEN;}public function register(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');if(isset(self::$i34[$i6[0]]))throw new InstructionProcessorException('Double definition of jump label "'.$i6[0].'" (first definition at '.self::$i34[$i6[0]]->W.':'.self::$i34[$i6[0]]->X,$L);self::$i34[$i6[0]]=$L;}public static function getLabel($I){if(isset(self::$i34[$I]))return self::$i34[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class MacroHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('macro',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){if(strtolower($P)=='.macro'){$i6=$Q->parseArguments($L,$P,'ss');if(!strlen($i6[0]))throw new InstructionProcessorException('Macro name cannot be empty',$L);$i35=new Macro(strtolower($i6[0]),$i6[1]);$Q->registerHandler(strtolower($i6[0]),$this);unset($i6[0],$i6[1]);foreach($i6 as$i32)$i35->addArgument($i32);return TokenVM::DELETE_TOKEN;}$i36=substr(strtolower($P),1);$i35=Macro::getMacro($i36);if(!$i35)throw new InstructionProcessorException('Call to bad macro',$L);$i2="";for($i37=0;$i37<$i35->numArgs();$i37++)$i2.='x';$i6=$Q->parseArguments($L,$P,$i2);$R->insertTokenArray($i35->buildCode($i6));return TokenVM::DELETE_TOKEN;}}class Macro{private$I="";private$b="";private$i38=array();private static$i39=array();public function __construct($I,$b){$this->I=$I;$this->b=$b;self::$i39[$I]=$this;}public function addArgument($i40){$this->i38[]=$i40;}public function numArgs(){return count($this->i38);}public function buildCode($i6=array()){$i37=0;$b=$this->b;foreach($this->i38 as$i32){$b=str_replace($i32,$i6[$i37],$b);$i37++;}$Y=Token::tokenize('<?php '.$b,'Macro '.$this->I);unset($Y[0]);return$Y;}public static function getMacro($I){if(isset(self::$i39[$I]))return self::$i39[$I];}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenHandlers\VariableHandler;use Moody\TokenVM;class MapVariableHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('mapvariable',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'ss');if(!class_exists('Moody\TokenHandlers\VariableHandler'))throw new InstructionProcessorException('Variable mapping is not available as the token handler for T_VARIABLE is not currently loaded',$L);VariableHandler::getInstance()->mapVariable($i6[0],$i6[1]);return TokenVM::DELETE_TOKEN;}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\InstructionHandler;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class RaiseErrorHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('raiseerror',$this);InstructionProcessor::getInstance()->registerHandler('error',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R=null){$i6=$Q->parseArguments($L,$P,'s');throw new InstructionProcessorException($i6[0],$L);}public function inlineExecute(Token$L,$P,InstructionProcessor$Q){$this->execute($L,$P,$Q);}}}namespace Moody\InstructionHandlers{use Moody\InstructionProcessorException;use Moody\IfInstruction;use Moody\InstructionHandler;use Moody\ConstantContainer;use Moody\Token;use Moody\TokenHandlers\InstructionProcessor;use Moody\TokenVM;class UndefineHandler implements InstructionHandler{private static$w=null;private function __construct(){InstructionProcessor::getInstance()->registerHandler('undef',$this);InstructionProcessor::getInstance()->registerHandler('undefine',$this);}public static function getInstance(){if(!self::$w)self::$w=new self;return self::$w;}public function execute(Token$L,$P,InstructionProcessor$Q,TokenVM$R){$i6=$Q->parseArguments($L,$P,'s');if(!ConstantContainer::isDefined($i6[0]))throw new InstructionProcessorException($P.': Undefined constant: '.$i6[0],$L);ConstantContainer::undefine($i6[0]);return TokenVM::DELETE_TOKEN;}}}?>